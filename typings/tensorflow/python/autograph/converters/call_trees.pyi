from tensorflow.python.autograph.core import converter as converter
from tensorflow.python.autograph.pyct import anno as anno, parser as parser, templates as templates
from tensorflow.python.autograph.utils import ag_logging as ag_logging
from typing import Any

class _Function:
    no_root: bool = ...
    context_name: Any = ...
    def __init__(self) -> None: ...

set_trace_warned: bool

class _ArgTemplateBuilder:
    def __init__(self) -> None: ...
    def add_arg(self, a: Any) -> None: ...
    def add_stararg(self, a: Any) -> None: ...
    def finalize(self) -> None: ...
    def to_ast(self): ...

class CallTreeTransformer(converter.Base):
    def visit_Lambda(self, node: Any): ...
    def visit_FunctionDef(self, node: Any): ...
    def visit_With(self, node: Any): ...
    def visit_Call(self, node: Any): ...

def transform(node: Any, ctx: Any): ...
