from tensorflow.python.autograph.core import converter as converter
from tensorflow.python.autograph.pyct import anno as anno, parser as parser, templates as templates
from tensorflow.python.autograph.pyct.static_analysis.annos import NodeAnno as NodeAnno
from typing import Any

BODY_DEFINITELY_RETURNS: str
ORELSE_DEFINITELY_RETURNS: str
STMT_DEFINITELY_RETURNS: str

class _RewriteBlock:
    definitely_returns: bool = ...
    def __init__(self) -> None: ...

class ConditionalReturnRewriter(converter.Base):
    def visit_Return(self, node: Any): ...
    def visit_While(self, node: Any): ...
    def visit_For(self, node: Any): ...
    def visit_With(self, node: Any): ...
    def visit_Try(self, node: Any): ...
    def visit_ExceptHandler(self, node: Any): ...
    def visit_If(self, node: Any): ...
    def visit_FunctionDef(self, node: Any): ...

class _Block:
    is_function: bool = ...
    return_used: bool = ...
    create_guard_next: bool = ...
    create_guard_now: bool = ...
    def __init__(self) -> None: ...

class _Function:
    do_return_var_name: Any = ...
    retval_var_name: Any = ...
    def __init__(self) -> None: ...

class ReturnStatementsTransformer(converter.Base):
    default_to_null_return: Any = ...
    def __init__(self, ctx: Any, default_to_null_return: Any) -> None: ...
    def visit_Return(self, node: Any): ...
    def visit_While(self, node: Any): ...
    def visit_For(self, node: Any): ...
    def visit_With(self, node: Any): ...
    def visit_Try(self, node: Any): ...
    def visit_ExceptHandler(self, node: Any): ...
    def visit_If(self, node: Any): ...
    def visit_FunctionDef(self, node: Any): ...

def transform(node: Any, ctx: Any, default_to_null_return: bool = ...): ...
