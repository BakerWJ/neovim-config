from tensorflow.python.autograph import operators as operators, utils as utils
from tensorflow.python.autograph.converters import arg_defaults as arg_defaults, asserts as asserts, break_statements as break_statements, call_trees as call_trees, conditional_expressions as conditional_expressions, continue_statements as continue_statements, control_flow as control_flow, directives as directives, function_scopes as function_scopes, lists as lists, logical_expressions as logical_expressions, return_statements as return_statements, slices as slices
from tensorflow.python.autograph.core import config as config, converter as converter, function_wrappers as function_wrappers, naming as naming, unsupported_features_checker as unsupported_features_checker
from tensorflow.python.autograph.lang import special_functions as special_functions
from tensorflow.python.autograph.pyct import ast_util as ast_util, inspect_utils as inspect_utils, loader as loader, origin_info as origin_info, parser as parser, pretty_printer as pretty_printer, qual_names as qual_names, templates as templates, transformer as transformer
from tensorflow.python.eager import function as function
from tensorflow.python.util import tf_inspect as tf_inspect
from typing import Any

class _ConvertedEntityFactoryInfo:
    def get_module(self): ...
    def get_factory(self): ...

class _FunctionCache:
    def __init__(self) -> None: ...
    def has(self, entity: Any, subkey: Any): ...
    def __getitem__(self, entity: Any): ...
    def __len__(self): ...

class _CodeObjectCache(_FunctionCache): ...
class _UnboundInstanceCache(_FunctionCache): ...

def convert(entity: Any, program_ctx: Any): ...
def is_whitelisted(o: Any, check_call_override: bool = ..., allow_namedtuple_subclass: bool = ...): ...
def is_in_whitelist_cache(entity: Any, options: Any): ...
def cache_whitelisted(entity: Any, options: Any) -> None: ...
def convert_entity_to_ast(o: Any, program_ctx: Any): ...
def convert_class_to_ast(c: Any, program_ctx: Any): ...

ag_internal: Any

def convert_func_to_ast(f: Any, program_ctx: Any, do_rename: bool = ...): ...
def node_to_graph(node: Any, context: Any): ...
