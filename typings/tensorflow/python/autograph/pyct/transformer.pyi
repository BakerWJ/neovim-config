import gast
from tensorflow.python.autograph.pyct import anno as anno, loader as loader, pretty_printer as pretty_printer, templates as templates
from typing import Any, Optional

class Context:
    info: Any = ...
    current_origin: Any = ...
    def __init__(self, info: Any) -> None: ...

class EntityInfo: ...

class _StateStack:
    def __init__(self, type_: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def enter(self) -> None: ...
    def exit(self) -> None: ...
    @property
    def stack(self): ...
    @property
    def level(self): ...
    @property
    def value(self): ...
    def __iter__(self) -> Any: ...
    def __getattr__(self, key: Any): ...
    def __setattr__(self, key: Any, value: Any) -> None: ...

class _State:
    def __init__(self) -> None: ...
    def __getitem__(self, key: Any): ...

class Base(gast.NodeTransformer):
    ctx: Any = ...
    state: Any = ...
    def __init__(self, ctx: Any) -> None: ...
    def debug_print(self, node: Any): ...
    def debug_print_src(self, node: Any): ...
    def create_assignment(self, target: Any, expression: Any): ...
    def visit_block(self, nodes: Any, before_visit: Optional[Any] = ..., after_visit: Optional[Any] = ...): ...
    def apply_to_single_assignments(self, targets: Any, values: Any, apply_fn: Any) -> None: ...
    def visit(self, node: Any): ...
