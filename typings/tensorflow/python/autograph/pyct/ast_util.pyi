import gast
from tensorflow.python.autograph.pyct import anno as anno, parser as parser, qual_names as qual_names
from tensorflow.python.util import tf_inspect as tf_inspect
from typing import Any, Optional

class CleanCopier:
    preserve_annos: Any = ...
    def __init__(self, preserve_annos: Any) -> None: ...
    def copy(self, node: Any): ...

def copy_clean(node: Any, preserve_annos: Optional[Any] = ...): ...

class SymbolRenamer(gast.NodeTransformer):
    name_map: Any = ...
    def __init__(self, name_map: Any) -> None: ...
    def visit_Nonlocal(self, node: Any): ...
    def visit_Global(self, node: Any): ...
    def visit_Name(self, node: Any): ...
    def visit_Attribute(self, node: Any): ...

def rename_symbols(node: Any, name_map: Any): ...
def keywords_to_dict(keywords: Any): ...

class PatternMatcher(gast.NodeVisitor):
    pattern: Any = ...
    pattern_stack: Any = ...
    matches: bool = ...
    def __init__(self, pattern: Any) -> None: ...
    def compare_and_visit(self, node: Any, pattern: Any) -> None: ...
    def no_match(self): ...
    def is_wildcard(self, p: Any): ...
    def generic_visit(self, node: Any): ...

def matches(node: Any, pattern: Any): ...
def apply_to_single_assignments(targets: Any, values: Any, apply_fn: Any) -> None: ...
def parallel_walk(node: Any, other: Any) -> None: ...

class LambdaDefinitionMatcher(gast.NodeVisitor):
    fn: Any = ...
    matching_nodes: Any = ...
    def __init__(self, fn: Any) -> None: ...
    def visit_Lambda(self, node: Any) -> None: ...

def find_matching_definitions(node: Any, f: Any): ...
