from tensorflow.core.protobuf import config_pb2 as config_pb2, meta_graph_pb2 as meta_graph_pb2, rewriter_config_pb2 as rewriter_config_pb2
from tensorflow.python.client import session as session
from tensorflow.python.eager import context as context, wrap_function as wrap_function
from tensorflow.python.framework import convert_to_constants as convert_to_constants, dtypes as dtypes, errors as errors, graph_util as graph_util, importer as importer, ops as ops
from tensorflow.python.grappler import tf_optimizer as tf_optimizer
from tensorflow.python.ops import array_ops as array_ops, gen_resource_variable_ops as gen_resource_variable_ops
from tensorflow.python.platform import tf_logging as tf_logging
from tensorflow.python.saved_model import builder as builder, load as load, loader as loader, save as save, signature_constants as signature_constants, tag_constants as tag_constants
from tensorflow.python.training import saver as saver
from tensorflow.python.training.tracking import tracking as tracking
from tensorflow.python.util import nest as nest
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

gen_trt_ops: Any
wrap_py_utils: Any

class TrtPrecisionMode:
    FP32: str = ...
    FP16: str = ...
    INT8: str = ...
    @staticmethod
    def supported_precision_modes(): ...

DEFAULT_TRT_MAX_WORKSPACE_SIZE_BYTES: Any

class TrtConversionParams:
    def __new__(cls, rewriter_config_template: Optional[Any] = ..., max_workspace_size_bytes: Any = ..., precision_mode: Any = ..., minimum_segment_size: int = ..., is_dynamic_op: bool = ..., maximum_cached_engines: int = ..., use_calibration: bool = ..., max_batch_size: int = ..., allow_build_at_runtime: bool = ...): ...

DEFAULT_TRT_CONVERSION_PARAMS: Any

def get_tensorrt_rewriter_config(conversion_params: Any, is_v2: bool = ..., disable_non_trt_optimizers: bool = ...): ...
def is_explicit_batch_mode_enabled(rewriter_config: Any): ...

class TrtGraphConverter:
    def __init__(self, input_saved_model_dir: Optional[Any] = ..., input_saved_model_tags: Optional[Any] = ..., input_saved_model_signature_key: Optional[Any] = ..., input_graph_def: Optional[Any] = ..., nodes_blacklist: Optional[Any] = ..., session_config: Optional[Any] = ..., max_batch_size: int = ..., max_workspace_size_bytes: Any = ..., precision_mode: Any = ..., minimum_segment_size: int = ..., is_dynamic_op: bool = ..., maximum_cached_engines: int = ..., use_calibration: bool = ...) -> None: ...
    def convert(self): ...
    def calibrate(self, fetch_names: Any, num_runs: Any, feed_dict_fn: Optional[Any] = ..., input_map_fn: Optional[Any] = ...): ...
    def save(self, output_saved_model_dir: Any) -> None: ...

class _TRTEngineResourceDeleter(tracking.CapturableResourceDeleter):
    def __init__(self, resource_name: Any, device: Any) -> None: ...
    def destroy_resource(self) -> None: ...

class _TRTEngineResource(tracking.TrackableResource):
    def __init__(self, resource_name: Any, filename: Any, maximum_cached_engines: Any, device: str = ...) -> None: ...

class TrtGraphConverterV2:
    def __init__(self, input_saved_model_dir: Optional[Any] = ..., input_saved_model_tags: Optional[Any] = ..., input_saved_model_signature_key: Optional[Any] = ..., conversion_params: Optional[Any] = ...) -> None: ...
    def convert(self, calibration_input_fn: Optional[Any] = ...) -> None: ...
    def build(self, input_fn: Any) -> None: ...
    def save(self, output_saved_model_dir: Any) -> None: ...

def create_inference_graph(input_graph_def: Any, outputs: Any, max_batch_size: int = ..., max_workspace_size_bytes: Any = ..., precision_mode: Any = ..., minimum_segment_size: int = ..., is_dynamic_op: bool = ..., maximum_cached_engines: int = ..., input_saved_model_dir: Optional[Any] = ..., input_saved_model_tags: Optional[Any] = ..., input_saved_model_signature_key: Optional[Any] = ..., output_saved_model_dir: Optional[Any] = ..., session_config: Optional[Any] = ...): ...
