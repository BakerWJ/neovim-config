from tensorflow.compiler.jit.ops import xla_ops as xla_ops, xla_ops_grad as xla_ops_grad
from tensorflow.core.framework import attr_value_pb2 as attr_value_pb2
from tensorflow.python.distribute import summary_op_util as summary_op_util
from tensorflow.python.eager import context as context, def_function as def_function
from tensorflow.python.framework import ops as ops
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, variable_scope as variable_scope
from tensorflow.python.util import compat as compat, nest as nest, tf_inspect as tf_inspect
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def compile(computation: Any, inputs: Optional[Any] = ...): ...

class XLACompileContext(control_flow_ops.XLAControlFlowContext):
    def __init__(self, name: Any, pivot: Any) -> None: ...
    def report_unsupported_operations(self) -> None: ...
    def AddOp(self, op: Any) -> None: ...
    def AddValue(self, val: Any): ...
    def AddInnerOp(self, op: Any) -> None: ...
    @property
    def grad_state(self) -> None: ...
    @property
    def back_prop(self): ...

def is_flat(outputs: Any): ...

class _CapturedObject:
    def __init__(self) -> None: ...
    def capture(self, o: Any) -> None: ...
    def get(self): ...

def check_function_argument_count(func: Any, input_arity: Any, infeed_queue: Any): ...
