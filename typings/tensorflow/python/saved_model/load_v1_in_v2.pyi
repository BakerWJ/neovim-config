from tensorflow.python.eager import context as context, lift_to_graph as lift_to_graph, wrap_function as wrap_function
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.ops import array_ops as array_ops
from tensorflow.python.saved_model import function_deserialization as function_deserialization, loader_impl as loader_impl, signature_serialization as signature_serialization
from tensorflow.python.training import monitored_session as monitored_session
from tensorflow.python.training.tracking import tracking as tracking
from typing import Any

class _Initializer(tracking.CapturableResource):
    def __init__(self, init_fn: Any, asset_paths: Any) -> None: ...

class _EagerSavedModelLoader(loader_impl.SavedModelLoader):
    def get_meta_graph_def_from_tags(self, tags: Any): ...
    def load_graph(self, returns: Any, meta_graph_def: Any) -> None: ...
    def restore_variables(self, wrapped: Any, restore_from_saver: Any) -> None: ...
    def load(self, tags: Any): ...

def load(export_dir: Any, tags: Any): ...
