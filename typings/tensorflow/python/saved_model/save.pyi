from collections import namedtuple
from tensorflow.core.framework import versions_pb2 as versions_pb2
from tensorflow.core.protobuf import meta_graph_pb2 as meta_graph_pb2, saved_model_pb2 as saved_model_pb2, saved_object_graph_pb2 as saved_object_graph_pb2
from tensorflow.python.eager import context as context, def_function as def_function
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, error_interpolation as error_interpolation, meta_graph as meta_graph, ops as ops, tensor_util as tensor_util, versions as versions
from tensorflow.python.lib.io import file_io as file_io
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, resource_variable_ops as resource_variable_ops
from tensorflow.python.saved_model import builder_impl as builder_impl, constants as constants, function_serialization as function_serialization, nested_structure_coder as nested_structure_coder, revived_types as revived_types, save_options as save_options, signature_constants as signature_constants, signature_def_utils as signature_def_utils, signature_serialization as signature_serialization, tag_constants as tag_constants, utils_impl as utils_impl
from tensorflow.python.training.saving import functional_saver as functional_saver
from tensorflow.python.training.tracking import base as base, graph_view as graph_view, tracking as tracking, util as util
from tensorflow.python.util import compat as compat, object_identity as object_identity
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

_CapturedConstant = namedtuple('_CapturedConstant', ['eager_tensor', 'graph_tensor'])

class _AugmentedGraphView(graph_view.ObjectGraphView):
    def __init__(self, root: Any) -> None: ...
    def add_object(self, parent_node: Any, name_in_parent: Any, subgraph_root: Any) -> None: ...
    def list_dependencies(self, obj: Any) -> None: ...
    def list_extra_dependencies(self, obj: Any): ...
    def list_functions(self, obj: Any): ...

class _SaveableView:
    checkpoint_view: Any = ...
    nodes: Any = ...
    node_ids: Any = ...
    captured_tensor_node_ids: Any = ...
    slot_variables: Any = ...
    concrete_functions: Any = ...
    wrapped_functions: Any = ...
    function_name_map: Any = ...
    def __init__(self, checkpoint_view: Any, wrapped_functions: Optional[Any] = ...) -> None: ...
    @property
    def root(self): ...
    def fill_object_graph_proto(self, proto: Any) -> None: ...
    def map_resources(self): ...

_AssetInfo = namedtuple('_AssetInfo', ['asset_defs', 'asset_initializers_by_resource', 'asset_filename_map', 'asset_index'])

def save(obj: Any, export_dir: Any, signatures: Optional[Any] = ..., options: Optional[Any] = ...) -> None: ...
def export_meta_graph(obj: Any, filename: Any, signatures: Optional[Any] = ..., options: Optional[Any] = ...) -> None: ...
