from tensorflow.core.protobuf import struct_pb2 as struct_pb2
from tensorflow.python.data.ops import dataset_ops as dataset_ops, iterator_ops as iterator_ops, optional_ops as optional_ops
from tensorflow.python.distribute import values as values
from tensorflow.python.framework import dtypes as dtypes, indexed_slices as indexed_slices, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape, tensor_spec as tensor_spec
from tensorflow.python.ops import resource_variable_ops as resource_variable_ops, tensor_array_ops as tensor_array_ops
from tensorflow.python.ops.ragged import ragged_tensor as ragged_tensor
from tensorflow.python.util import compat as compat
from tensorflow.python.util.compat import collections_abc as collections_abc
from typing import Any

class NotEncodableError(Exception): ...

class StructureCoder:
    @classmethod
    def register_codec(cls, x: Any) -> None: ...
    def encode_structure(self, nested_structure: Any): ...
    def can_encode(self, nested_structure: Any): ...
    def decode_proto(self, proto: Any): ...

class _ListCodec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, list_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _TupleCodec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, tuple_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _DictCodec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, dict_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _NamedTupleCodec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, named_tuple_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _Float64Codec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, float64_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _Int64Codec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, int_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _StringCodec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, string_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _NoneCodec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, none_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any) -> None: ...

class _BoolCodec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, bool_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _TensorShapeCodec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, tensor_shape_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _TensorTypeCodec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, tensor_dtype_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _TensorSpecCodec:
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, tensor_spec_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...

class _TypeSpecCodec:
    TYPE_SPEC_CLASS_FROM_PROTO: Any = ...
    TYPE_SPEC_CLASS_TO_PROTO: Any = ...
    def can_encode(self, pyobj: Any): ...
    def do_encode(self, type_spec_value: Any, encode_fn: Any): ...
    def can_decode(self, value: Any): ...
    def do_decode(self, value: Any, decode_fn: Any): ...
