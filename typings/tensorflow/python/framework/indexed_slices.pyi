from collections import namedtuple
from tensorflow.python import tf2 as tf2
from tensorflow.python.eager import context as context
from tensorflow.python.framework import composite_tensor as composite_tensor, dtypes as dtypes, tensor_conversion_registry as tensor_conversion_registry, tensor_like as tensor_like, tensor_shape as tensor_shape, type_spec as type_spec
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

math_ops: Any
ops: Any
tensor_spec: Any
tensor_util: Any

class IndexedSlices(_TensorLike, composite_tensor.CompositeTensor):
    def __init__(self, values: Any, indices: Any, dense_shape: Optional[Any] = ...) -> None: ...
    @property
    def values(self): ...
    @property
    def indices(self): ...
    @property
    def dense_shape(self): ...
    @property
    def shape(self): ...
    @property
    def name(self): ...
    @property
    def device(self): ...
    @property
    def op(self): ...
    @property
    def dtype(self): ...
    @property
    def graph(self): ...
    def __neg__(self): ...
    def consumers(self): ...

IndexedSlicesValue = namedtuple('IndexedSlicesValue', ['values', 'indices', 'dense_shape'])

class IndexedSlicesSpec(type_spec.TypeSpec):
    value_type: Any = ...
    def __init__(self, shape: Optional[Any] = ..., dtype: Any = ..., indices_dtype: Any = ..., dense_shape_dtype: Optional[Any] = ..., indices_shape: Optional[Any] = ...) -> None: ...

def convert_to_tensor_or_indexed_slices(value: Any, dtype: Optional[Any] = ..., name: Optional[Any] = ...): ...
def internal_convert_to_tensor_or_indexed_slices(value: Any, dtype: Optional[Any] = ..., name: Optional[Any] = ..., as_ref: bool = ...): ...
def internal_convert_n_to_tensor_or_indexed_slices(values: Any, dtype: Optional[Any] = ..., name: Optional[Any] = ..., as_ref: bool = ...): ...
def convert_n_to_tensor_or_indexed_slices(values: Any, dtype: Optional[Any] = ..., name: Optional[Any] = ...): ...
