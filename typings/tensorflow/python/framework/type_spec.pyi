import abc
from tensorflow.python.framework import composite_tensor as composite_tensor, dtypes as dtypes, tensor_shape as tensor_shape
from tensorflow.python.util import compat as compat, nest as nest, tf_decorator as tf_decorator
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

tensor_spec: Any
ops: Any

class TypeSpec(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def value_type(self) -> Any: ...
    def is_compatible_with(self, spec_or_value: Any): ...
    def most_specific_compatible_type(self, other: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __reduce__(self): ...

class BatchableTypeSpec(TypeSpec, metaclass=abc.ABCMeta): ...

def type_spec_from_value(value: Any): ...
def register_type_spec_from_value_converter(type_object: Any, converter_fn: Any, allow_subclass: bool = ...) -> None: ...
