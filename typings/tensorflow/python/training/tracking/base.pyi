import abc
from collections import namedtuple
from tensorflow.python.eager import context as context
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops
from tensorflow.python.training.saving import saveable_object as saveable_object
from tensorflow.python.util import tf_contextlib as tf_contextlib, tf_decorator as tf_decorator
from typing import Any, Optional

OBJECT_GRAPH_PROTO_KEY: str
VARIABLE_VALUE_KEY: str
OBJECT_CONFIG_JSON_KEY: str

TrackableReference = namedtuple('TrackableReference', ['name', 'ref'])

class CheckpointInitialValue(ops.Tensor):
    wrapped_value: Any = ...
    def __init__(self, checkpoint_position: Any, shape: Optional[Any] = ...) -> None: ...
    def __getattr__(self, attr: Any): ...
    @property
    def checkpoint_position(self): ...

class NoRestoreSaveable(saveable_object.SaveableObject):
    def __init__(self, tensor: Any, name: Any, dtype: Optional[Any] = ..., device: Optional[Any] = ...) -> None: ...
    def restore(self, restored_tensors: Any, restored_shapes: Any): ...

class PythonStateSaveable(saveable_object.SaveableObject, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def feed_dict_additions(self) -> Any: ...
    @abc.abstractmethod
    def freeze(self) -> Any: ...

class PythonStringStateSaveable(PythonStateSaveable):
    def __init__(self, name: Any, state_callback: Any, restore_callback: Optional[Any] = ...): ...
    @property
    def optional_restore(self): ...
    def feed_dict_additions(self): ...
    def freeze(self): ...
    def python_restore(self, restored_strings: Any) -> None: ...
    def restore(self, restored_tensors: Any, restored_shapes: Any): ...

class CheckpointPosition:
    def __init__(self, checkpoint: Any, proto_id: Any) -> None: ...
    def restore(self, trackable: Any) -> None: ...
    def bind_object(self, trackable: Any): ...
    def is_simple_variable(self): ...
    def value_tensors(self): ...
    def gather_ops_or_named_saveables(self): ...
    def restore_ops(self): ...
    @property
    def checkpoint(self): ...
    @property
    def trackable(self): ...
    @property
    def object_proto(self): ...
    @property
    def restore_uid(self): ...

_DeferredSlotVariableRestoration = namedtuple('_DeferredSlotVariableRestoration', ['original_variable', 'slot_variable_id', 'slot_name'])

_SlotVariableRestoration = namedtuple('_SlotVariableRestoration', ['optimizer_id', 'slot_variable_id', 'slot_name'])

def no_automatic_dependency_tracking(method: Any): ...
def no_manual_dependency_tracking_scope(obj: Any) -> None: ...
def no_automatic_dependency_tracking_scope(obj: Any) -> None: ...

class Trackable: ...
