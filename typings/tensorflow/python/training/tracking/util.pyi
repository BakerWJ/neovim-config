import abc
from tensorflow.core.protobuf import trackable_object_graph_pb2 as trackable_object_graph_pb2
from tensorflow.python.client import session as session_lib
from tensorflow.python.eager import context as context, def_function as def_function
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, errors_impl as errors_impl, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.lib.io import file_io as file_io
from tensorflow.python.ops import array_ops as array_ops, init_ops as init_ops, variable_scope as variable_scope, variables as variables
from tensorflow.python.training import checkpoint_management as checkpoint_management, py_checkpoint_reader as py_checkpoint_reader
from tensorflow.python.training.saving import functional_saver as functional_saver, saveable_object_util as saveable_object_util
from tensorflow.python.training.tracking import base as base, data_structures as data_structures, tracking as tracking
from tensorflow.python.util import compat as compat, deprecation as deprecation, lazy_loader as lazy_loader, object_identity as object_identity, tf_contextlib as tf_contextlib
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

keras_backend: Any

def get_session(): ...

class _ObjectGraphProtoPrettyPrinter:
    def __init__(self, object_graph_proto: Any) -> None: ...
    @property
    def node_names(self): ...

class _CheckpointRestoreCoordinatorDeleter:
    expect_partial: Any = ...
    object_graph_proto: Any = ...
    matched_proto_ids: Any = ...
    unused_attributes: Any = ...
    def __init__(self, expect_partial: Any, object_graph_proto: Any, matched_proto_ids: Any, unused_attributes: Any) -> None: ...
    def set_expect_partial(self, expect_partial: Any) -> None: ...
    def __del__(self) -> None: ...

class _CheckpointRestoreCoordinator:
    object_graph_proto: Any = ...
    restore_uid: Any = ...
    unused_attributes: Any = ...
    object_by_proto_id: Any = ...
    matched_proto_ids: Any = ...
    all_python_objects: Any = ...
    save_path_tensor: Any = ...
    save_path_string: Any = ...
    dtype_map: Any = ...
    restore_ops: Any = ...
    restore_ops_by_name: Any = ...
    graph_view: Any = ...
    new_restore_ops_callback: Any = ...
    deferred_slot_restorations: Any = ...
    slot_restorations: Any = ...
    expect_partial_attr: bool = ...
    def __init__(self, object_graph_proto: Any, save_path: Any, save_path_tensor: Any, restore_op_cache: Any, graph_view: Any) -> None: ...
    @property
    def expect_partial(self): ...
    @expect_partial.setter
    def expect_partial(self, expect_partial: Any) -> None: ...
    def new_restore_ops(self, new_ops: Any) -> None: ...
    def restore_saveables(self, tensor_saveables: Any, python_saveables: Any): ...

class _NameBasedRestoreCoordinator:
    save_path: Any = ...
    dtype_map: Any = ...
    unused_attributes: Any = ...
    restore_uid: Any = ...
    def __init__(self, save_path: Any, dtype_map: Optional[Any] = ...) -> None: ...
    def globally_named_object_attributes(self, trackable: Any) -> None: ...
    def eager_restore(self, trackable: Any) -> None: ...

def add_variable(trackable: Any, name: Any, shape: Optional[Any] = ..., dtype: Any = ..., initializer: Optional[Any] = ..., trainable: bool = ...): ...
def object_metadata(save_path: Any): ...
def list_objects(root_trackable: Any): ...
def gather_initializers(root_trackable: Any): ...
def capture_dependencies(template: Any): ...

class _LoadStatus(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def assert_consumed(self) -> Any: ...
    @abc.abstractmethod
    def assert_existing_objects_matched(self) -> Any: ...
    @abc.abstractmethod
    def assert_nontrivial_match(self) -> Any: ...
    @abc.abstractmethod
    def run_restore_ops(self, session: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def initialize_or_restore(self, session: Optional[Any] = ...) -> Any: ...
    def expect_partial(self): ...

def streaming_restore(status: Any, session: Optional[Any] = ...): ...

class CheckpointLoadStatus(_LoadStatus):
    def __init__(self, checkpoint: Any, feed_dict: Any, graph_view: Any) -> None: ...
    def assert_consumed(self): ...
    def assert_existing_objects_matched(self): ...
    def assert_nontrivial_match(self): ...
    def run_restore_ops(self, session: Optional[Any] = ...) -> None: ...
    def initialize_or_restore(self, session: Optional[Any] = ...) -> None: ...
    def expect_partial(self): ...

class InitializationOnlyStatus(_LoadStatus):
    def __init__(self, graph_view: Any, restore_uid: Any) -> None: ...
    def assert_consumed(self) -> None: ...
    def assert_existing_objects_matched(self) -> None: ...
    def assert_nontrivial_match(self) -> None: ...
    def run_restore_ops(self, session: Optional[Any] = ...) -> None: ...
    def initialize_or_restore(self, session: Optional[Any] = ...) -> None: ...

class NameBasedSaverStatus(_LoadStatus):
    def __init__(self, checkpoint: Any, graph_view: Any) -> None: ...
    def add_to_optionally_restored(self, var: Any) -> None: ...
    def assert_consumed(self): ...
    def assert_existing_objects_matched(self): ...
    def assert_nontrivial_match(self): ...
    def run_restore_ops(self, session: Optional[Any] = ...) -> None: ...
    def initialize_or_restore(self, session: Optional[Any] = ...) -> None: ...

class _SessionWithFeedDictAdditions(session_lib.SessionInterface):
    def __init__(self, session: Any, feed_additions: Any) -> None: ...
    def run(self, fetches: Any, feed_dict: Optional[Any] = ..., **kwargs: Any): ...

class TrackableSaver:
    def __init__(self, graph_view: Any) -> None: ...
    def save(self, file_prefix: Any, checkpoint_number: Optional[Any] = ..., session: Optional[Any] = ...): ...
    def restore(self, save_path: Any): ...

def frozen_saver(root_trackable: Any): ...
def saver_with_op_caching(obj: Any): ...

class CheckpointV1(tracking.AutoTrackable):
    def __init__(self, **kwargs: Any): ...
    def write(self, file_prefix: Any, session: Optional[Any] = ...): ...
    @property
    def save_counter(self): ...
    def save(self, file_prefix: Any, session: Optional[Any] = ...): ...
    def restore(self, save_path: Any): ...

class Checkpoint(tracking.AutoTrackable):
    def __init__(self, **kwargs: Any): ...
    def write(self, file_prefix: Any): ...
    @property
    def save_counter(self): ...
    def save(self, file_prefix: Any): ...
    def restore(self, save_path: Any): ...
