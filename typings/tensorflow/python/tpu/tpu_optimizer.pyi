from tensorflow.python.framework import ops as ops
from tensorflow.python.keras.optimizer_v2 import optimizer_v2 as optimizer_v2
from tensorflow.python.ops.losses import losses as losses
from tensorflow.python.tpu import tpu_function as tpu_function
from tensorflow.python.tpu.ops import tpu_ops as tpu_ops
from tensorflow.python.training import optimizer as optimizer
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

class CrossShardOptimizer(optimizer.Optimizer):
    def __init__(self, opt: Any, reduction: Any = ..., name: str = ..., group_assignment: Optional[Any] = ...) -> None: ...
    def compute_gradients(self, loss: Any, var_list: Optional[Any] = ..., **kwargs: Any): ...
    def apply_gradients(self, grads_and_vars: Any, global_step: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def get_slot(self, *args: Any, **kwargs: Any): ...
    def get_slot_names(self, *args: Any, **kwargs: Any): ...
    def variables(self): ...
