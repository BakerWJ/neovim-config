from tensorflow.python.ops import linalg_ops as linalg_ops, math_ops as math_ops
from typing import Any, Optional

TRACE_MODE_NAN_INF: str
TRACE_MODE_PART_TENSOR: str
TRACE_MODE_FULL_TENSOR: str
TRACE_MODE_FULL_IF_NAN: str
TRACE_MODE_NORM: str
TRACE_MODE_MAX_ABS: str
TRACE_MODE_SUMMARY: str
TRACE_MODE_FULL_TENSOR_SUMMARY: str
TT_SUMMARY_NORM: Any
TT_SUMMARY_MAX: Any
TT_SUMMARY_MIN: Any
TT_SUMMARY_MEAN: Any
TT_SUMMARY_VAR: Any
TT_SUMMARY_SIZE: Any
TT_SUMMARY_SIGNATURES: Any

class TTParameters:
    trace_mode: Any = ...
    submode: Any = ...
    trace_dir: Any = ...
    report_file_path: Any = ...
    op_range: Any = ...
    excluded_opname_re_list: Any = ...
    excluded_optype_re_list: Any = ...
    included_opname_re_list: Any = ...
    included_optype_re_list: Any = ...
    is_conditional_trace: Any = ...
    trace_scalar_ops: Any = ...
    use_compact_trace: Any = ...
    trace_ops_before_included: Any = ...
    trace_ops_after_included: Any = ...
    trace_stack_size: Any = ...
    included_cores: Any = ...
    include_less_interesting_ops: Any = ...
    trace_level: Any = ...
    summary_signatures: Any = ...
    collect_summary_per_core: Any = ...
    def __init__(self, env: Optional[Any] = ...) -> None: ...
    def is_brief_mode(self): ...
    @staticmethod
    def match_next_flag(flags: Any, pos: Any): ...
    def get_signature_to_agg_fn_map(self): ...
    def get_flag_value(self, wanted_flag_name: Any): ...
    def is_flag_on(self, flag_name: Any): ...
    def is_enabled(self): ...
    def use_test_undeclared_outputs_dir(self): ...
