from tensorflow.python.platform import tf_logging as tf_logging
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any

is_sequence: Any
is_sequence_or_composite: Any

def is_nested(seq: Any): ...
def flatten(structure: Any, expand_composites: bool = ...): ...

class _DotString: ...

def assert_same_structure(nest1: Any, nest2: Any, check_types: bool = ..., expand_composites: bool = ...): ...
def flatten_dict_items(dictionary: Any): ...
def pack_sequence_as(structure: Any, flat_sequence: Any, expand_composites: bool = ...): ...
def map_structure(func: Any, *structure: Any, **kwargs: Any): ...
def map_structure_with_paths(func: Any, *structure: Any, **kwargs: Any): ...
def map_structure_with_tuple_paths(func: Any, *structure: Any, **kwargs: Any): ...
def assert_shallow_structure(shallow_tree: Any, input_tree: Any, check_types: bool = ..., expand_composites: bool = ...) -> None: ...
def flatten_up_to(shallow_tree: Any, input_tree: Any, check_types: bool = ..., expand_composites: bool = ...): ...
def flatten_with_tuple_paths_up_to(shallow_tree: Any, input_tree: Any, check_types: bool = ..., expand_composites: bool = ...): ...
def map_structure_up_to(shallow_tree: Any, func: Any, *inputs: Any, **kwargs: Any): ...
def map_structure_with_tuple_paths_up_to(shallow_tree: Any, func: Any, *inputs: Any, **kwargs: Any): ...
def get_traverse_shallow_structure(traverse_fn: Any, structure: Any, expand_composites: bool = ...): ...
def yield_flat_paths(nest: Any, expand_composites: bool = ...) -> None: ...
def flatten_with_joined_string_paths(structure: Any, separator: str = ..., expand_composites: bool = ...): ...
def flatten_with_tuple_paths(structure: Any, expand_composites: bool = ...): ...

list_to_tuple: Any
