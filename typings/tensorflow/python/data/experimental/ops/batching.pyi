from tensorflow.python.data.ops import dataset_ops as dataset_ops
from tensorflow.python.data.util import convert as convert, nest as nest
from tensorflow.python.framework import dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape, tensor_spec as tensor_spec, tensor_util as tensor_util
from tensorflow.python.ops.ragged import ragged_tensor as ragged_tensor
from tensorflow.python.util import deprecation as deprecation
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def dense_to_ragged_batch(batch_size: Any, drop_remainder: bool = ..., row_splits_dtype: Any = ...): ...
def dense_to_sparse_batch(batch_size: Any, row_shape: Any): ...
def map_and_batch_with_legacy_function(map_func: Any, batch_size: Any, num_parallel_batches: Optional[Any] = ..., drop_remainder: bool = ..., num_parallel_calls: Optional[Any] = ...): ...
def map_and_batch(map_func: Any, batch_size: Any, num_parallel_batches: Optional[Any] = ..., drop_remainder: bool = ..., num_parallel_calls: Optional[Any] = ...): ...
def unbatch(): ...

class _DenseToSparseBatchDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset: Any, batch_size: Any, row_shape: Any) -> None: ...
    @property
    def element_spec(self): ...

class _MapAndBatchDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset: Any, map_func: Any, batch_size: Any, num_parallel_calls: Any, drop_remainder: Any, use_legacy_function: bool = ...): ...
    @property
    def element_spec(self): ...

class _DenseToRaggedDataset(dataset_ops.UnaryDataset):
    def __init__(self, input_dataset: Any, row_splits_dtype: Any): ...
    @property
    def element_spec(self): ...
