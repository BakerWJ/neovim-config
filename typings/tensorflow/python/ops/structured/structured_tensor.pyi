from tensorflow.python.framework import composite_tensor as composite_tensor, constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_spec as tensor_spec, type_spec as type_spec
from tensorflow.python.ops import array_ops as array_ops
from tensorflow.python.ops.ragged import ragged_factory_ops as ragged_factory_ops, ragged_tensor as ragged_tensor, ragged_util as ragged_util
from tensorflow.python.util import compat as compat, nest as nest
from typing import Any, Optional

class StructuredTensor(composite_tensor.CompositeTensor):
    def __init__(self, shape: Any, fields: Any) -> None: ...
    @classmethod
    def from_row_splits(cls, values: Any, row_splits: Any, validate: bool = ...): ...
    @property
    def rank(self): ...
    @property
    def shape(self): ...
    @property
    def nested_row_splits(self): ...
    @property
    def ragged_rank(self): ...
    def field_names(self): ...
    def field_value(self, field_name: Any): ...
    def __getitem__(self, key: Any): ...
    def to_pyval(self): ...
    @classmethod
    def from_pyval(cls, pyval: Any, typespec: Optional[Any] = ...): ...

class StructuredTensorSpec(type_spec.BatchableTypeSpec):
    def __init__(self, shape: Any, field_specs: Any) -> None: ...
    @property
    def value_type(self): ...
    @classmethod
    def from_value(cls, value: Any): ...
