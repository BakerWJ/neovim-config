from tensorflow.python.client import pywrap_tf_session as pywrap_tf_session
from tensorflow.python.eager import backprop as backprop, context as context
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, gen_array_ops as gen_array_ops, op_selector as op_selector, resource_variable_ops as resource_variable_ops, variable_scope as variable_scope
from tensorflow.python.util import nest as nest, tf_decorator as tf_decorator, tf_inspect as tf_inspect
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

VAR_OP_TYPES: Any

def copy_handle_data(source_t: Any, target_t: Any) -> None: ...
def custom_gradient(f: Optional[Any] = ...): ...

class Bind:
    @classmethod
    def decorator(cls, d: Any): ...
    def __init__(self, f: Any, d: Any) -> None: ...
    def __get__(self, instance: Any, owner: Any): ...
    def __call__(self, *a: Any, **k: Any): ...

def get_variable_by_name(var_name: Any): ...
def get_dependent_variables(input_ops: Any, output_ops: Any): ...
def recompute_grad(f: Any): ...
def grad_pass_through(f: Any): ...
