from tensorflow.python.ops.gen_string_ops import *
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, gen_parsing_ops as gen_parsing_ops, gen_string_ops as gen_string_ops, math_ops as math_ops
from tensorflow.python.util import deprecation as deprecation, dispatch as dispatch
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def regex_full_match(input: Any, pattern: Any, name: Optional[Any] = ...): ...
def regex_replace(input: Any, pattern: Any, rewrite: Any, replace_global: bool = ..., name: Optional[Any] = ...): ...
def string_format(template: Any, inputs: Any, placeholder: str = ..., summarize: int = ..., name: Optional[Any] = ...): ...
def string_split(source: Any, sep: Optional[Any] = ..., skip_empty: bool = ..., delimiter: Optional[Any] = ...): ...
def string_split_v2(source: Any, sep: Optional[Any] = ..., maxsplit: int = ...): ...
def reduce_join(inputs: Any, axis: Optional[Any] = ..., keep_dims: Optional[Any] = ..., separator: str = ..., name: Optional[Any] = ..., reduction_indices: Optional[Any] = ..., keepdims: Optional[Any] = ...): ...
def reduce_join_v2(inputs: Any, axis: Optional[Any] = ..., keepdims: bool = ..., separator: str = ..., name: Optional[Any] = ...): ...
def string_length(input: Any, name: Optional[Any] = ..., unit: str = ...): ...
def string_length_v2(input: Any, unit: str = ..., name: Optional[Any] = ...): ...
def substr_deprecated(input: Any, pos: Any, len: Any, name: Optional[Any] = ..., unit: str = ...): ...
def substr(input: Any, pos: Any, len: Any, name: Optional[Any] = ..., unit: str = ...): ...
def substr_v2(input: Any, pos: Any, len: Any, unit: str = ..., name: Optional[Any] = ...): ...
def string_to_number(input: Any, out_type: Any = ..., name: Optional[Any] = ...): ...
def string_to_number_v1(string_tensor: Optional[Any] = ..., out_type: Any = ..., name: Optional[Any] = ..., input: Optional[Any] = ...): ...
def string_to_hash_bucket(input: Any, num_buckets: Any, name: Optional[Any] = ...): ...
def string_to_hash_bucket_v1(string_tensor: Optional[Any] = ..., num_buckets: Optional[Any] = ..., name: Optional[Any] = ..., input: Optional[Any] = ...): ...
def string_join(inputs: Any, separator: str = ..., name: Optional[Any] = ...): ...
