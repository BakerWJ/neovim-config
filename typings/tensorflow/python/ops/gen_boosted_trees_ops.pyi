from collections import namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def boosted_trees_aggregate_stats(node_ids: Any, gradients: Any, hessians: Any, feature: Any, max_splits: Any, num_buckets: Any, name: Optional[Any] = ...): ...

BoostedTreesAggregateStats: Any

def boosted_trees_aggregate_stats_eager_fallback(node_ids: Any, gradients: Any, hessians: Any, feature: Any, max_splits: Any, num_buckets: Any, name: Any, ctx: Any): ...
def boosted_trees_bucketize(float_values: Any, bucket_boundaries: Any, name: Optional[Any] = ...): ...

BoostedTreesBucketize: Any

def boosted_trees_bucketize_eager_fallback(float_values: Any, bucket_boundaries: Any, name: Any, ctx: Any): ...

_BoostedTreesCalculateBestFeatureSplitOutput = namedtuple('BoostedTreesCalculateBestFeatureSplit', ['node_ids', 'gains', 'feature_dimensions', 'thresholds', 'left_node_contribs', 'right_node_contribs', 'split_with_default_directions'])

def boosted_trees_calculate_best_feature_split(node_id_range: Any, stats_summary: Any, l1: Any, l2: Any, tree_complexity: Any, min_node_weight: Any, logits_dimension: Any, split_type: str = ..., name: Optional[Any] = ...): ...

BoostedTreesCalculateBestFeatureSplit: Any

def boosted_trees_calculate_best_feature_split_eager_fallback(node_id_range: Any, stats_summary: Any, l1: Any, l2: Any, tree_complexity: Any, min_node_weight: Any, logits_dimension: Any, split_type: Any, name: Any, ctx: Any): ...

_BoostedTreesCalculateBestFeatureSplitV2Output = namedtuple('BoostedTreesCalculateBestFeatureSplitV2', ['node_ids', 'gains', 'feature_ids', 'feature_dimensions', 'thresholds', 'left_node_contribs', 'right_node_contribs', 'split_with_default_directions'])

def boosted_trees_calculate_best_feature_split_v2(node_id_range: Any, stats_summaries_list: Any, split_types: Any, candidate_feature_ids: Any, l1: Any, l2: Any, tree_complexity: Any, min_node_weight: Any, logits_dimension: Any, name: Optional[Any] = ...): ...

BoostedTreesCalculateBestFeatureSplitV2: Any

def boosted_trees_calculate_best_feature_split_v2_eager_fallback(node_id_range: Any, stats_summaries_list: Any, split_types: Any, candidate_feature_ids: Any, l1: Any, l2: Any, tree_complexity: Any, min_node_weight: Any, logits_dimension: Any, name: Any, ctx: Any): ...

_BoostedTreesCalculateBestGainsPerFeatureOutput = namedtuple('BoostedTreesCalculateBestGainsPerFeature', ['node_ids_list', 'gains_list', 'thresholds_list', 'left_node_contribs_list', 'right_node_contribs_list'])

def boosted_trees_calculate_best_gains_per_feature(node_id_range: Any, stats_summary_list: Any, l1: Any, l2: Any, tree_complexity: Any, min_node_weight: Any, max_splits: Any, name: Optional[Any] = ...): ...

BoostedTreesCalculateBestGainsPerFeature: Any

def boosted_trees_calculate_best_gains_per_feature_eager_fallback(node_id_range: Any, stats_summary_list: Any, l1: Any, l2: Any, tree_complexity: Any, min_node_weight: Any, max_splits: Any, name: Any, ctx: Any): ...
def boosted_trees_center_bias(tree_ensemble_handle: Any, mean_gradients: Any, mean_hessians: Any, l1: Any, l2: Any, name: Optional[Any] = ...): ...

BoostedTreesCenterBias: Any

def boosted_trees_center_bias_eager_fallback(tree_ensemble_handle: Any, mean_gradients: Any, mean_hessians: Any, l1: Any, l2: Any, name: Any, ctx: Any): ...
def boosted_trees_create_ensemble(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_serialized: Any, name: Optional[Any] = ...): ...

BoostedTreesCreateEnsemble: Any

def boosted_trees_create_ensemble_eager_fallback(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_serialized: Any, name: Any, ctx: Any): ...
def boosted_trees_create_quantile_stream_resource(quantile_stream_resource_handle: Any, epsilon: Any, num_streams: Any, max_elements: int = ..., name: Optional[Any] = ...): ...

BoostedTreesCreateQuantileStreamResource: Any

def boosted_trees_create_quantile_stream_resource_eager_fallback(quantile_stream_resource_handle: Any, epsilon: Any, num_streams: Any, max_elements: Any, name: Any, ctx: Any): ...
def boosted_trees_deserialize_ensemble(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_serialized: Any, name: Optional[Any] = ...): ...

BoostedTreesDeserializeEnsemble: Any

def boosted_trees_deserialize_ensemble_eager_fallback(tree_ensemble_handle: Any, stamp_token: Any, tree_ensemble_serialized: Any, name: Any, ctx: Any): ...
def boosted_trees_ensemble_resource_handle_op(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

BoostedTreesEnsembleResourceHandleOp: Any

def boosted_trees_ensemble_resource_handle_op_eager_fallback(container: Any, shared_name: Any, name: Any, ctx: Any): ...
def boosted_trees_example_debug_outputs(tree_ensemble_handle: Any, bucketized_features: Any, logits_dimension: Any, name: Optional[Any] = ...): ...

BoostedTreesExampleDebugOutputs: Any

def boosted_trees_example_debug_outputs_eager_fallback(tree_ensemble_handle: Any, bucketized_features: Any, logits_dimension: Any, name: Any, ctx: Any): ...
def boosted_trees_flush_quantile_summaries(quantile_stream_resource_handle: Any, num_features: Any, name: Optional[Any] = ...): ...

BoostedTreesFlushQuantileSummaries: Any

def boosted_trees_flush_quantile_summaries_eager_fallback(quantile_stream_resource_handle: Any, num_features: Any, name: Any, ctx: Any): ...

_BoostedTreesGetEnsembleStatesOutput = namedtuple('BoostedTreesGetEnsembleStates', ['stamp_token', 'num_trees', 'num_finalized_trees', 'num_attempted_layers', 'last_layer_nodes_range'])

def boosted_trees_get_ensemble_states(tree_ensemble_handle: Any, name: Optional[Any] = ...): ...

BoostedTreesGetEnsembleStates: Any

def boosted_trees_get_ensemble_states_eager_fallback(tree_ensemble_handle: Any, name: Any, ctx: Any): ...
def boosted_trees_make_quantile_summaries(float_values: Any, example_weights: Any, epsilon: Any, name: Optional[Any] = ...): ...

BoostedTreesMakeQuantileSummaries: Any

def boosted_trees_make_quantile_summaries_eager_fallback(float_values: Any, example_weights: Any, epsilon: Any, name: Any, ctx: Any): ...
def boosted_trees_make_stats_summary(node_ids: Any, gradients: Any, hessians: Any, bucketized_features_list: Any, max_splits: Any, num_buckets: Any, name: Optional[Any] = ...): ...

BoostedTreesMakeStatsSummary: Any

def boosted_trees_make_stats_summary_eager_fallback(node_ids: Any, gradients: Any, hessians: Any, bucketized_features_list: Any, max_splits: Any, num_buckets: Any, name: Any, ctx: Any): ...
def boosted_trees_predict(tree_ensemble_handle: Any, bucketized_features: Any, logits_dimension: Any, name: Optional[Any] = ...): ...

BoostedTreesPredict: Any

def boosted_trees_predict_eager_fallback(tree_ensemble_handle: Any, bucketized_features: Any, logits_dimension: Any, name: Any, ctx: Any): ...
def boosted_trees_quantile_stream_resource_add_summaries(quantile_stream_resource_handle: Any, summaries: Any, name: Optional[Any] = ...): ...

BoostedTreesQuantileStreamResourceAddSummaries: Any

def boosted_trees_quantile_stream_resource_add_summaries_eager_fallback(quantile_stream_resource_handle: Any, summaries: Any, name: Any, ctx: Any): ...
def boosted_trees_quantile_stream_resource_deserialize(quantile_stream_resource_handle: Any, bucket_boundaries: Any, name: Optional[Any] = ...): ...

BoostedTreesQuantileStreamResourceDeserialize: Any

def boosted_trees_quantile_stream_resource_deserialize_eager_fallback(quantile_stream_resource_handle: Any, bucket_boundaries: Any, name: Any, ctx: Any): ...
def boosted_trees_quantile_stream_resource_flush(quantile_stream_resource_handle: Any, num_buckets: Any, generate_quantiles: bool = ..., name: Optional[Any] = ...): ...

BoostedTreesQuantileStreamResourceFlush: Any

def boosted_trees_quantile_stream_resource_flush_eager_fallback(quantile_stream_resource_handle: Any, num_buckets: Any, generate_quantiles: Any, name: Any, ctx: Any): ...
def boosted_trees_quantile_stream_resource_get_bucket_boundaries(quantile_stream_resource_handle: Any, num_features: Any, name: Optional[Any] = ...): ...

BoostedTreesQuantileStreamResourceGetBucketBoundaries: Any

def boosted_trees_quantile_stream_resource_get_bucket_boundaries_eager_fallback(quantile_stream_resource_handle: Any, num_features: Any, name: Any, ctx: Any): ...
def boosted_trees_quantile_stream_resource_handle_op(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

BoostedTreesQuantileStreamResourceHandleOp: Any

def boosted_trees_quantile_stream_resource_handle_op_eager_fallback(container: Any, shared_name: Any, name: Any, ctx: Any): ...

_BoostedTreesSerializeEnsembleOutput = namedtuple('BoostedTreesSerializeEnsemble', ['stamp_token', 'tree_ensemble_serialized'])

def boosted_trees_serialize_ensemble(tree_ensemble_handle: Any, name: Optional[Any] = ...): ...

BoostedTreesSerializeEnsemble: Any

def boosted_trees_serialize_ensemble_eager_fallback(tree_ensemble_handle: Any, name: Any, ctx: Any): ...

_BoostedTreesSparseAggregateStatsOutput = namedtuple('BoostedTreesSparseAggregateStats', ['stats_summary_indices', 'stats_summary_values', 'stats_summary_shape'])

def boosted_trees_sparse_aggregate_stats(node_ids: Any, gradients: Any, hessians: Any, feature_indices: Any, feature_values: Any, feature_shape: Any, max_splits: Any, num_buckets: Any, name: Optional[Any] = ...): ...

BoostedTreesSparseAggregateStats: Any

def boosted_trees_sparse_aggregate_stats_eager_fallback(node_ids: Any, gradients: Any, hessians: Any, feature_indices: Any, feature_values: Any, feature_shape: Any, max_splits: Any, num_buckets: Any, name: Any, ctx: Any): ...

_BoostedTreesSparseCalculateBestFeatureSplitOutput = namedtuple('BoostedTreesSparseCalculateBestFeatureSplit', ['node_ids', 'gains', 'feature_dimensions', 'thresholds', 'left_node_contribs', 'right_node_contribs', 'split_with_default_directions'])

def boosted_trees_sparse_calculate_best_feature_split(node_id_range: Any, stats_summary_indices: Any, stats_summary_values: Any, stats_summary_shape: Any, l1: Any, l2: Any, tree_complexity: Any, min_node_weight: Any, logits_dimension: Any, split_type: str = ..., name: Optional[Any] = ...): ...

BoostedTreesSparseCalculateBestFeatureSplit: Any

def boosted_trees_sparse_calculate_best_feature_split_eager_fallback(node_id_range: Any, stats_summary_indices: Any, stats_summary_values: Any, stats_summary_shape: Any, l1: Any, l2: Any, tree_complexity: Any, min_node_weight: Any, logits_dimension: Any, split_type: Any, name: Any, ctx: Any): ...

_BoostedTreesTrainingPredictOutput = namedtuple('BoostedTreesTrainingPredict', ['partial_logits', 'tree_ids', 'node_ids'])

def boosted_trees_training_predict(tree_ensemble_handle: Any, cached_tree_ids: Any, cached_node_ids: Any, bucketized_features: Any, logits_dimension: Any, name: Optional[Any] = ...): ...

BoostedTreesTrainingPredict: Any

def boosted_trees_training_predict_eager_fallback(tree_ensemble_handle: Any, cached_tree_ids: Any, cached_node_ids: Any, bucketized_features: Any, logits_dimension: Any, name: Any, ctx: Any): ...
def boosted_trees_update_ensemble(tree_ensemble_handle: Any, feature_ids: Any, node_ids: Any, gains: Any, thresholds: Any, left_node_contribs: Any, right_node_contribs: Any, max_depth: Any, learning_rate: Any, pruning_mode: Any, name: Optional[Any] = ...): ...

BoostedTreesUpdateEnsemble: Any

def boosted_trees_update_ensemble_eager_fallback(tree_ensemble_handle: Any, feature_ids: Any, node_ids: Any, gains: Any, thresholds: Any, left_node_contribs: Any, right_node_contribs: Any, max_depth: Any, learning_rate: Any, pruning_mode: Any, name: Any, ctx: Any): ...
def boosted_trees_update_ensemble_v2(tree_ensemble_handle: Any, feature_ids: Any, dimension_ids: Any, node_ids: Any, gains: Any, thresholds: Any, left_node_contribs: Any, right_node_contribs: Any, split_types: Any, max_depth: Any, learning_rate: Any, pruning_mode: Any, logits_dimension: int = ..., name: Optional[Any] = ...): ...

BoostedTreesUpdateEnsembleV2: Any

def boosted_trees_update_ensemble_v2_eager_fallback(tree_ensemble_handle: Any, feature_ids: Any, dimension_ids: Any, node_ids: Any, gains: Any, thresholds: Any, left_node_contribs: Any, right_node_contribs: Any, split_types: Any, max_depth: Any, learning_rate: Any, pruning_mode: Any, logits_dimension: Any, name: Any, ctx: Any): ...
def is_boosted_trees_ensemble_initialized(tree_ensemble_handle: Any, name: Optional[Any] = ...): ...

IsBoostedTreesEnsembleInitialized: Any

def is_boosted_trees_ensemble_initialized_eager_fallback(tree_ensemble_handle: Any, name: Any, ctx: Any): ...
def is_boosted_trees_quantile_stream_resource_initialized(quantile_stream_resource_handle: Any, name: Optional[Any] = ...): ...

IsBoostedTreesQuantileStreamResourceInitialized: Any

def is_boosted_trees_quantile_stream_resource_initialized_eager_fallback(quantile_stream_resource_handle: Any, name: Any, ctx: Any): ...
