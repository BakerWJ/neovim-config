from collections import namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def as_string(input: Any, precision: int = ..., scientific: bool = ..., shortest: bool = ..., width: int = ..., fill: str = ..., name: Optional[Any] = ...): ...

AsString: Any

def as_string_eager_fallback(input: Any, precision: Any, scientific: Any, shortest: Any, width: Any, fill: Any, name: Any, ctx: Any): ...
def decode_base64(input: Any, name: Optional[Any] = ...): ...

DecodeBase64: Any

def decode_base64_eager_fallback(input: Any, name: Any, ctx: Any): ...
def encode_base64(input: Any, pad: bool = ..., name: Optional[Any] = ...): ...

EncodeBase64: Any

def encode_base64_eager_fallback(input: Any, pad: Any, name: Any, ctx: Any): ...
def reduce_join(inputs: Any, reduction_indices: Any, keep_dims: bool = ..., separator: str = ..., name: Optional[Any] = ...): ...

ReduceJoin: Any

def reduce_join_eager_fallback(inputs: Any, reduction_indices: Any, keep_dims: Any, separator: Any, name: Any, ctx: Any): ...
def regex_full_match(input: Any, pattern: Any, name: Optional[Any] = ...): ...

RegexFullMatch: Any

def regex_full_match_eager_fallback(input: Any, pattern: Any, name: Any, ctx: Any): ...
def regex_replace(input: Any, pattern: Any, rewrite: Any, replace_global: bool = ..., name: Optional[Any] = ...): ...

RegexReplace: Any

def regex_replace_eager_fallback(input: Any, pattern: Any, rewrite: Any, replace_global: Any, name: Any, ctx: Any): ...
def static_regex_full_match(input: Any, pattern: Any, name: Optional[Any] = ...): ...

StaticRegexFullMatch: Any

def static_regex_full_match_eager_fallback(input: Any, pattern: Any, name: Any, ctx: Any): ...
def static_regex_replace(input: Any, pattern: Any, rewrite: Any, replace_global: bool = ..., name: Optional[Any] = ...): ...

StaticRegexReplace: Any

def static_regex_replace_eager_fallback(input: Any, pattern: Any, rewrite: Any, replace_global: Any, name: Any, ctx: Any): ...
def string_format(inputs: Any, template: str = ..., placeholder: str = ..., summarize: int = ..., name: Optional[Any] = ...): ...

StringFormat: Any

def string_format_eager_fallback(inputs: Any, template: Any, placeholder: Any, summarize: Any, name: Any, ctx: Any): ...
def string_join(inputs: Any, separator: str = ..., name: Optional[Any] = ...): ...

StringJoin: Any

def string_join_eager_fallback(inputs: Any, separator: Any, name: Any, ctx: Any): ...
def string_length(input: Any, unit: str = ..., name: Optional[Any] = ...): ...

StringLength: Any

def string_length_eager_fallback(input: Any, unit: Any, name: Any, ctx: Any): ...
def string_lower(input: Any, encoding: str = ..., name: Optional[Any] = ...): ...

StringLower: Any

def string_lower_eager_fallback(input: Any, encoding: Any, name: Any, ctx: Any): ...

_StringNGramsOutput = namedtuple('StringNGrams', ['ngrams', 'ngrams_splits'])

def string_n_grams(data: Any, data_splits: Any, separator: Any, ngram_widths: Any, left_pad: Any, right_pad: Any, pad_width: Any, preserve_short_sequences: Any, name: Optional[Any] = ...): ...

StringNGrams: Any

def string_n_grams_eager_fallback(data: Any, data_splits: Any, separator: Any, ngram_widths: Any, left_pad: Any, right_pad: Any, pad_width: Any, preserve_short_sequences: Any, name: Any, ctx: Any): ...

_StringSplitOutput = namedtuple('StringSplit', ['indices', 'values', 'shape'])

def string_split(input: Any, delimiter: Any, skip_empty: bool = ..., name: Optional[Any] = ...): ...

StringSplit: Any

def string_split_eager_fallback(input: Any, delimiter: Any, skip_empty: Any, name: Any, ctx: Any): ...

_StringSplitV2Output = namedtuple('StringSplitV2', ['indices', 'values', 'shape'])

def string_split_v2(input: Any, sep: Any, maxsplit: int = ..., name: Optional[Any] = ...): ...

StringSplitV2: Any

def string_split_v2_eager_fallback(input: Any, sep: Any, maxsplit: Any, name: Any, ctx: Any): ...
def string_strip(input: Any, name: Optional[Any] = ...): ...

StringStrip: Any

def string_strip_eager_fallback(input: Any, name: Any, ctx: Any): ...
def string_to_hash_bucket(string_tensor: Any, num_buckets: Any, name: Optional[Any] = ...): ...

StringToHashBucket: Any

def string_to_hash_bucket_eager_fallback(string_tensor: Any, num_buckets: Any, name: Any, ctx: Any): ...
def string_to_hash_bucket_fast(input: Any, num_buckets: Any, name: Optional[Any] = ...): ...

StringToHashBucketFast: Any

def string_to_hash_bucket_fast_eager_fallback(input: Any, num_buckets: Any, name: Any, ctx: Any): ...
def string_to_hash_bucket_strong(input: Any, num_buckets: Any, key: Any, name: Optional[Any] = ...): ...

StringToHashBucketStrong: Any

def string_to_hash_bucket_strong_eager_fallback(input: Any, num_buckets: Any, key: Any, name: Any, ctx: Any): ...
def string_upper(input: Any, encoding: str = ..., name: Optional[Any] = ...): ...

StringUpper: Any

def string_upper_eager_fallback(input: Any, encoding: Any, name: Any, ctx: Any): ...
def substr(input: Any, pos: Any, len: Any, unit: str = ..., name: Optional[Any] = ...): ...

Substr: Any

def substr_eager_fallback(input: Any, pos: Any, len: Any, unit: Any, name: Any, ctx: Any): ...

_UnicodeDecodeOutput = namedtuple('UnicodeDecode', ['row_splits', 'char_values'])

def unicode_decode(input: Any, input_encoding: Any, errors: str = ..., replacement_char: int = ..., replace_control_characters: bool = ..., Tsplits: Any = ..., name: Optional[Any] = ...): ...

UnicodeDecode: Any

def unicode_decode_eager_fallback(input: Any, input_encoding: Any, errors: Any, replacement_char: Any, replace_control_characters: Any, Tsplits: Any, name: Any, ctx: Any): ...

_UnicodeDecodeWithOffsetsOutput = namedtuple('UnicodeDecodeWithOffsets', ['row_splits', 'char_values', 'char_to_byte_starts'])

def unicode_decode_with_offsets(input: Any, input_encoding: Any, errors: str = ..., replacement_char: int = ..., replace_control_characters: bool = ..., Tsplits: Any = ..., name: Optional[Any] = ...): ...

UnicodeDecodeWithOffsets: Any

def unicode_decode_with_offsets_eager_fallback(input: Any, input_encoding: Any, errors: Any, replacement_char: Any, replace_control_characters: Any, Tsplits: Any, name: Any, ctx: Any): ...
def unicode_encode(input_values: Any, input_splits: Any, output_encoding: Any, errors: str = ..., replacement_char: int = ..., name: Optional[Any] = ...): ...

UnicodeEncode: Any

def unicode_encode_eager_fallback(input_values: Any, input_splits: Any, output_encoding: Any, errors: Any, replacement_char: Any, name: Any, ctx: Any): ...
def unicode_script(input: Any, name: Optional[Any] = ...): ...

UnicodeScript: Any

def unicode_script_eager_fallback(input: Any, name: Any, ctx: Any): ...
def unicode_transcode(input: Any, input_encoding: Any, output_encoding: Any, errors: str = ..., replacement_char: int = ..., replace_control_characters: bool = ..., name: Optional[Any] = ...): ...

UnicodeTranscode: Any

def unicode_transcode_eager_fallback(input: Any, input_encoding: Any, output_encoding: Any, errors: Any, replacement_char: Any, replace_control_characters: Any, name: Any, ctx: Any): ...
def unsorted_segment_join(inputs: Any, segment_ids: Any, num_segments: Any, separator: str = ..., name: Optional[Any] = ...): ...

UnsortedSegmentJoin: Any

def unsorted_segment_join_eager_fallback(inputs: Any, segment_ids: Any, num_segments: Any, separator: Any, name: Any, ctx: Any): ...
