from tensorflow.python.framework import ops as ops
from tensorflow.python.util import tf_inspect as tf_inspect
from typing import Any, Optional

def adjoint(lin_op_a: Any, name: Optional[Any] = ...): ...
def cholesky(lin_op_a: Any, name: Optional[Any] = ...): ...
def matmul(lin_op_a: Any, lin_op_b: Any, name: Optional[Any] = ...): ...
def solve(lin_op_a: Any, lin_op_b: Any, name: Optional[Any] = ...): ...
def inverse(lin_op_a: Any, name: Optional[Any] = ...): ...

class RegisterAdjoint:
    def __init__(self, lin_op_cls_a: Any) -> None: ...
    def __call__(self, adjoint_fn: Any): ...

class RegisterCholesky:
    def __init__(self, lin_op_cls_a: Any) -> None: ...
    def __call__(self, cholesky_fn: Any): ...

class RegisterMatmul:
    def __init__(self, lin_op_cls_a: Any, lin_op_cls_b: Any) -> None: ...
    def __call__(self, matmul_fn: Any): ...

class RegisterSolve:
    def __init__(self, lin_op_cls_a: Any, lin_op_cls_b: Any) -> None: ...
    def __call__(self, solve_fn: Any): ...

class RegisterInverse:
    def __init__(self, lin_op_cls_a: Any) -> None: ...
    def __call__(self, inverse_fn: Any): ...
