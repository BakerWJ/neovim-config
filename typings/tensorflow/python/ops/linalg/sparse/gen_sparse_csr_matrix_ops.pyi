from collections import namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

_CSRSparseMatrixComponentsOutput = namedtuple('CSRSparseMatrixComponents', ['row_ptrs', 'col_inds', 'values'])

def csr_sparse_matrix_components(csr_sparse_matrix: Any, index: Any, type: Any, name: Optional[Any] = ...): ...

CSRSparseMatrixComponents: Any

def csr_sparse_matrix_components_eager_fallback(csr_sparse_matrix: Any, index: Any, type: Any, name: Any, ctx: Any): ...
def csr_sparse_matrix_to_dense(sparse_input: Any, type: Any, name: Optional[Any] = ...): ...

CSRSparseMatrixToDense: Any

def csr_sparse_matrix_to_dense_eager_fallback(sparse_input: Any, type: Any, name: Any, ctx: Any): ...

_CSRSparseMatrixToSparseTensorOutput = namedtuple('CSRSparseMatrixToSparseTensor', ['indices', 'values', 'dense_shape'])

def csr_sparse_matrix_to_sparse_tensor(sparse_matrix: Any, type: Any, name: Optional[Any] = ...): ...

CSRSparseMatrixToSparseTensor: Any

def csr_sparse_matrix_to_sparse_tensor_eager_fallback(sparse_matrix: Any, type: Any, name: Any, ctx: Any): ...
def dense_to_csr_sparse_matrix(dense_input: Any, indices: Any, name: Optional[Any] = ...): ...

DenseToCSRSparseMatrix: Any

def dense_to_csr_sparse_matrix_eager_fallback(dense_input: Any, indices: Any, name: Any, ctx: Any): ...
def sparse_matrix_add(a: Any, b: Any, alpha: Any, beta: Any, name: Optional[Any] = ...): ...

SparseMatrixAdd: Any

def sparse_matrix_add_eager_fallback(a: Any, b: Any, alpha: Any, beta: Any, name: Any, ctx: Any): ...
def sparse_matrix_mat_mul(a: Any, b: Any, transpose_a: bool = ..., transpose_b: bool = ..., adjoint_a: bool = ..., adjoint_b: bool = ..., transpose_output: bool = ..., conjugate_output: bool = ..., name: Optional[Any] = ...): ...

SparseMatrixMatMul: Any

def sparse_matrix_mat_mul_eager_fallback(a: Any, b: Any, transpose_a: Any, transpose_b: Any, adjoint_a: Any, adjoint_b: Any, transpose_output: Any, conjugate_output: Any, name: Any, ctx: Any): ...
def sparse_matrix_mul(a: Any, b: Any, name: Optional[Any] = ...): ...

SparseMatrixMul: Any

def sparse_matrix_mul_eager_fallback(a: Any, b: Any, name: Any, ctx: Any): ...
def sparse_matrix_nnz(sparse_matrix: Any, name: Optional[Any] = ...): ...

SparseMatrixNNZ: Any

def sparse_matrix_nnz_eager_fallback(sparse_matrix: Any, name: Any, ctx: Any): ...
def sparse_matrix_ordering_amd(input: Any, name: Optional[Any] = ...): ...

SparseMatrixOrderingAMD: Any

def sparse_matrix_ordering_amd_eager_fallback(input: Any, name: Any, ctx: Any): ...
def sparse_matrix_softmax(logits: Any, type: Any, name: Optional[Any] = ...): ...

SparseMatrixSoftmax: Any

def sparse_matrix_softmax_eager_fallback(logits: Any, type: Any, name: Any, ctx: Any): ...
def sparse_matrix_softmax_grad(softmax: Any, grad_softmax: Any, type: Any, name: Optional[Any] = ...): ...

SparseMatrixSoftmaxGrad: Any

def sparse_matrix_softmax_grad_eager_fallback(softmax: Any, grad_softmax: Any, type: Any, name: Any, ctx: Any): ...
def sparse_matrix_sparse_cholesky(input: Any, permutation: Any, type: Any, name: Optional[Any] = ...): ...

SparseMatrixSparseCholesky: Any

def sparse_matrix_sparse_cholesky_eager_fallback(input: Any, permutation: Any, type: Any, name: Any, ctx: Any): ...
def sparse_matrix_sparse_mat_mul(a: Any, b: Any, type: Any, transpose_a: bool = ..., transpose_b: bool = ..., adjoint_a: bool = ..., adjoint_b: bool = ..., name: Optional[Any] = ...): ...

SparseMatrixSparseMatMul: Any

def sparse_matrix_sparse_mat_mul_eager_fallback(a: Any, b: Any, type: Any, transpose_a: Any, transpose_b: Any, adjoint_a: Any, adjoint_b: Any, name: Any, ctx: Any): ...
def sparse_matrix_transpose(input: Any, type: Any, conjugate: bool = ..., name: Optional[Any] = ...): ...

SparseMatrixTranspose: Any

def sparse_matrix_transpose_eager_fallback(input: Any, type: Any, conjugate: Any, name: Any, ctx: Any): ...
def sparse_matrix_zeros(dense_shape: Any, type: Any, name: Optional[Any] = ...): ...

SparseMatrixZeros: Any

def sparse_matrix_zeros_eager_fallback(dense_shape: Any, type: Any, name: Any, ctx: Any): ...
def sparse_tensor_to_csr_sparse_matrix(indices: Any, values: Any, dense_shape: Any, name: Optional[Any] = ...): ...

SparseTensorToCSRSparseMatrix: Any

def sparse_tensor_to_csr_sparse_matrix_eager_fallback(indices: Any, values: Any, dense_shape: Any, name: Any, ctx: Any): ...
