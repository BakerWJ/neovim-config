from tensorflow.python.ops.linalg import linear_operator
from typing import Any, Optional

class _BaseLinearOperatorCirculant(linear_operator.LinearOperator):
    def __init__(self, spectrum: Any, block_depth: Any, input_output_dtype: Any = ..., is_non_singular: Optional[Any] = ..., is_self_adjoint: Optional[Any] = ..., is_positive_definite: Optional[Any] = ..., is_square: bool = ..., name: str = ...) -> None: ...
    @property
    def block_depth(self): ...
    def block_shape_tensor(self): ...
    @property
    def block_shape(self): ...
    @property
    def spectrum(self): ...
    def convolution_kernel(self, name: str = ...): ...
    def assert_hermitian_spectrum(self, name: str = ...): ...

class LinearOperatorCirculant(_BaseLinearOperatorCirculant):
    def __init__(self, spectrum: Any, input_output_dtype: Any = ..., is_non_singular: Optional[Any] = ..., is_self_adjoint: Optional[Any] = ..., is_positive_definite: Optional[Any] = ..., is_square: bool = ..., name: str = ...) -> None: ...

class LinearOperatorCirculant2D(_BaseLinearOperatorCirculant):
    def __init__(self, spectrum: Any, input_output_dtype: Any = ..., is_non_singular: Optional[Any] = ..., is_self_adjoint: Optional[Any] = ..., is_positive_definite: Optional[Any] = ..., is_square: bool = ..., name: str = ...) -> None: ...

class LinearOperatorCirculant3D(_BaseLinearOperatorCirculant):
    def __init__(self, spectrum: Any, input_output_dtype: Any = ..., is_non_singular: Optional[Any] = ..., is_self_adjoint: Optional[Any] = ..., is_positive_definite: Optional[Any] = ..., is_square: bool = ..., name: str = ...) -> None: ...
