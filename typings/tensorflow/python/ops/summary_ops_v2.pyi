import abc
import threading
from collections import namedtuple
from tensorflow.core.framework import graph_pb2 as graph_pb2, summary_pb2 as summary_pb2
from tensorflow.core.protobuf import config_pb2 as config_pb2
from tensorflow.python.eager import context as context
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, smart_cond as smart_cond, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, gen_summary_ops as gen_summary_ops, math_ops as math_ops, resource_variable_ops as resource_variable_ops, summary_op_util as summary_op_util
from tensorflow.python.training import training_util as training_util
from tensorflow.python.util import deprecation as deprecation, tf_contextlib as tf_contextlib
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

class _SummaryState(threading.local):
    is_recording: Any = ...
    is_recording_distribution_strategy: bool = ...
    writer: Any = ...
    step: Any = ...
    def __init__(self) -> None: ...

def should_record_summaries(): ...
def record_if(condition: Any) -> None: ...
def record_summaries_every_n_global_steps(n: Any, global_step: Optional[Any] = ...): ...
def always_record_summaries(): ...
def never_record_summaries(): ...
def get_step(): ...
def set_step(step: Any) -> None: ...

class SummaryWriter(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def set_as_default(self) -> Any: ...
    @abc.abstractmethod
    def as_default(self) -> Any: ...
    def init(self) -> None: ...
    def flush(self) -> None: ...
    def close(self) -> None: ...

class ResourceSummaryWriter(SummaryWriter):
    def __init__(self, shared_name: Any, init_op_fn: Any, name: Optional[Any] = ..., v2: bool = ..., metadata: Optional[Any] = ...) -> None: ...
    def set_as_default(self) -> None: ...
    def as_default(self) -> None: ...
    def init(self): ...
    def flush(self): ...
    def close(self): ...

class NoopSummaryWriter(SummaryWriter):
    def set_as_default(self) -> None: ...
    def as_default(self) -> None: ...
    def init(self) -> None: ...
    def flush(self) -> None: ...
    def close(self) -> None: ...

def initialize(graph: Optional[Any] = ..., session: Optional[Any] = ...) -> None: ...
def create_file_writer_v2(logdir: Any, max_queue: Optional[Any] = ..., flush_millis: Optional[Any] = ..., filename_suffix: Optional[Any] = ..., name: Optional[Any] = ...): ...
def create_file_writer(logdir: Any, max_queue: Optional[Any] = ..., flush_millis: Optional[Any] = ..., filename_suffix: Optional[Any] = ..., name: Optional[Any] = ...): ...
def create_db_writer(db_uri: Any, experiment_name: Optional[Any] = ..., run_name: Optional[Any] = ..., user_name: Optional[Any] = ..., name: Optional[Any] = ...): ...
def create_noop_writer(): ...
def all_v2_summary_ops(): ...
def summary_writer_initializer_op(): ...
def summary_scope(name: Any, default_name: str = ..., values: Optional[Any] = ...) -> None: ...
def write(tag: Any, tensor: Any, step: Optional[Any] = ..., metadata: Optional[Any] = ..., name: Optional[Any] = ...): ...
def write_raw_pb(tensor: Any, step: Optional[Any] = ..., name: Optional[Any] = ...): ...
def summary_writer_function(name: Any, tensor: Any, function: Any, family: Optional[Any] = ...): ...
def generic(name: Any, tensor: Any, metadata: Optional[Any] = ..., family: Optional[Any] = ..., step: Optional[Any] = ...): ...
def scalar(name: Any, tensor: Any, family: Optional[Any] = ..., step: Optional[Any] = ...): ...
def histogram(name: Any, tensor: Any, family: Optional[Any] = ..., step: Optional[Any] = ...): ...
def image(name: Any, tensor: Any, bad_color: Optional[Any] = ..., max_images: int = ..., family: Optional[Any] = ..., step: Optional[Any] = ...): ...
def audio(name: Any, tensor: Any, sample_rate: Any, max_outputs: Any, family: Optional[Any] = ..., step: Optional[Any] = ...): ...
def graph(param: Any, step: Optional[Any] = ..., name: Optional[Any] = ...): ...
def import_event(tensor: Any, name: Optional[Any] = ...): ...
def flush(writer: Optional[Any] = ..., name: Optional[Any] = ...): ...
def eval_dir(model_dir: Any, name: Optional[Any] = ...): ...
def create_summary_file_writer(*args: Any, **kwargs: Any): ...
def run_metadata(name: Any, data: Any, step: Optional[Any] = ...): ...
def run_metadata_graphs(name: Any, data: Any, step: Optional[Any] = ...): ...
def keras_model(name: Any, data: Any, step: Optional[Any] = ...): ...

_TraceContext = namedtuple('TraceContext', ['graph', 'profiler'])

def trace_on(graph: bool = ..., profiler: bool = ...) -> None: ...
def trace_export(name: Any, step: Optional[Any] = ..., profiler_outdir: Optional[Any] = ...) -> None: ...
def trace_off() -> None: ...
