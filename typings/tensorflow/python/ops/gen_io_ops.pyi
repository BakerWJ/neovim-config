from collections import namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def fixed_length_record_reader(record_bytes: Any, header_bytes: int = ..., footer_bytes: int = ..., hop_bytes: int = ..., container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

FixedLengthRecordReader: Any

def fixed_length_record_reader_eager_fallback(record_bytes: Any, header_bytes: Any, footer_bytes: Any, hop_bytes: Any, container: Any, shared_name: Any, name: Any, ctx: Any) -> None: ...
def fixed_length_record_reader_v2(record_bytes: Any, header_bytes: int = ..., footer_bytes: int = ..., hop_bytes: int = ..., container: str = ..., shared_name: str = ..., encoding: str = ..., name: Optional[Any] = ...): ...

FixedLengthRecordReaderV2: Any

def fixed_length_record_reader_v2_eager_fallback(record_bytes: Any, header_bytes: Any, footer_bytes: Any, hop_bytes: Any, container: Any, shared_name: Any, encoding: Any, name: Any, ctx: Any): ...
def identity_reader(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

IdentityReader: Any

def identity_reader_eager_fallback(container: Any, shared_name: Any, name: Any, ctx: Any) -> None: ...
def identity_reader_v2(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

IdentityReaderV2: Any

def identity_reader_v2_eager_fallback(container: Any, shared_name: Any, name: Any, ctx: Any): ...
def lmdb_reader(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

LMDBReader: Any

def lmdb_reader_eager_fallback(container: Any, shared_name: Any, name: Any, ctx: Any) -> None: ...
def matching_files(pattern: Any, name: Optional[Any] = ...): ...

MatchingFiles: Any

def matching_files_eager_fallback(pattern: Any, name: Any, ctx: Any): ...
def merge_v2_checkpoints(checkpoint_prefixes: Any, destination_prefix: Any, delete_old_dirs: bool = ..., name: Optional[Any] = ...): ...

MergeV2Checkpoints: Any

def merge_v2_checkpoints_eager_fallback(checkpoint_prefixes: Any, destination_prefix: Any, delete_old_dirs: Any, name: Any, ctx: Any): ...
def read_file(filename: Any, name: Optional[Any] = ...): ...

ReadFile: Any

def read_file_eager_fallback(filename: Any, name: Any, ctx: Any): ...
def reader_num_records_produced(reader_handle: Any, name: Optional[Any] = ...): ...

ReaderNumRecordsProduced: Any

def reader_num_records_produced_eager_fallback(reader_handle: Any, name: Any, ctx: Any) -> None: ...
def reader_num_records_produced_v2(reader_handle: Any, name: Optional[Any] = ...): ...

ReaderNumRecordsProducedV2: Any

def reader_num_records_produced_v2_eager_fallback(reader_handle: Any, name: Any, ctx: Any): ...
def reader_num_work_units_completed(reader_handle: Any, name: Optional[Any] = ...): ...

ReaderNumWorkUnitsCompleted: Any

def reader_num_work_units_completed_eager_fallback(reader_handle: Any, name: Any, ctx: Any) -> None: ...
def reader_num_work_units_completed_v2(reader_handle: Any, name: Optional[Any] = ...): ...

ReaderNumWorkUnitsCompletedV2: Any

def reader_num_work_units_completed_v2_eager_fallback(reader_handle: Any, name: Any, ctx: Any): ...

_ReaderReadOutput = namedtuple('ReaderRead', ['key', 'value'])

def reader_read(reader_handle: Any, queue_handle: Any, name: Optional[Any] = ...): ...

ReaderRead: Any

def reader_read_eager_fallback(reader_handle: Any, queue_handle: Any, name: Any, ctx: Any) -> None: ...

_ReaderReadUpToOutput = namedtuple('ReaderReadUpTo', ['keys', 'values'])

def reader_read_up_to(reader_handle: Any, queue_handle: Any, num_records: Any, name: Optional[Any] = ...): ...

ReaderReadUpTo: Any

def reader_read_up_to_eager_fallback(reader_handle: Any, queue_handle: Any, num_records: Any, name: Any, ctx: Any) -> None: ...

_ReaderReadUpToV2Output = namedtuple('ReaderReadUpToV2', ['keys', 'values'])

def reader_read_up_to_v2(reader_handle: Any, queue_handle: Any, num_records: Any, name: Optional[Any] = ...): ...

ReaderReadUpToV2: Any

def reader_read_up_to_v2_eager_fallback(reader_handle: Any, queue_handle: Any, num_records: Any, name: Any, ctx: Any): ...

_ReaderReadV2Output = namedtuple('ReaderReadV2', ['key', 'value'])

def reader_read_v2(reader_handle: Any, queue_handle: Any, name: Optional[Any] = ...): ...

ReaderReadV2: Any

def reader_read_v2_eager_fallback(reader_handle: Any, queue_handle: Any, name: Any, ctx: Any): ...
def reader_reset(reader_handle: Any, name: Optional[Any] = ...): ...

ReaderReset: Any

def reader_reset_eager_fallback(reader_handle: Any, name: Any, ctx: Any) -> None: ...
def reader_reset_v2(reader_handle: Any, name: Optional[Any] = ...): ...

ReaderResetV2: Any

def reader_reset_v2_eager_fallback(reader_handle: Any, name: Any, ctx: Any): ...
def reader_restore_state(reader_handle: Any, state: Any, name: Optional[Any] = ...): ...

ReaderRestoreState: Any

def reader_restore_state_eager_fallback(reader_handle: Any, state: Any, name: Any, ctx: Any) -> None: ...
def reader_restore_state_v2(reader_handle: Any, state: Any, name: Optional[Any] = ...): ...

ReaderRestoreStateV2: Any

def reader_restore_state_v2_eager_fallback(reader_handle: Any, state: Any, name: Any, ctx: Any): ...
def reader_serialize_state(reader_handle: Any, name: Optional[Any] = ...): ...

ReaderSerializeState: Any

def reader_serialize_state_eager_fallback(reader_handle: Any, name: Any, ctx: Any) -> None: ...
def reader_serialize_state_v2(reader_handle: Any, name: Optional[Any] = ...): ...

ReaderSerializeStateV2: Any

def reader_serialize_state_v2_eager_fallback(reader_handle: Any, name: Any, ctx: Any): ...
def restore(file_pattern: Any, tensor_name: Any, dt: Any, preferred_shard: int = ..., name: Optional[Any] = ...): ...

Restore: Any

def restore_eager_fallback(file_pattern: Any, tensor_name: Any, dt: Any, preferred_shard: Any, name: Any, ctx: Any): ...
def restore_slice(file_pattern: Any, tensor_name: Any, shape_and_slice: Any, dt: Any, preferred_shard: int = ..., name: Optional[Any] = ...): ...

RestoreSlice: Any

def restore_slice_eager_fallback(file_pattern: Any, tensor_name: Any, shape_and_slice: Any, dt: Any, preferred_shard: Any, name: Any, ctx: Any): ...
def restore_v2(prefix: Any, tensor_names: Any, shape_and_slices: Any, dtypes: Any, name: Optional[Any] = ...): ...

RestoreV2: Any

def restore_v2_eager_fallback(prefix: Any, tensor_names: Any, shape_and_slices: Any, dtypes: Any, name: Any, ctx: Any): ...
def save(filename: Any, tensor_names: Any, data: Any, name: Optional[Any] = ...): ...

Save: Any

def save_eager_fallback(filename: Any, tensor_names: Any, data: Any, name: Any, ctx: Any): ...
def save_slices(filename: Any, tensor_names: Any, shapes_and_slices: Any, data: Any, name: Optional[Any] = ...): ...

SaveSlices: Any

def save_slices_eager_fallback(filename: Any, tensor_names: Any, shapes_and_slices: Any, data: Any, name: Any, ctx: Any): ...
def save_v2(prefix: Any, tensor_names: Any, shape_and_slices: Any, tensors: Any, name: Optional[Any] = ...): ...

SaveV2: Any

def save_v2_eager_fallback(prefix: Any, tensor_names: Any, shape_and_slices: Any, tensors: Any, name: Any, ctx: Any): ...
def sharded_filename(basename: Any, shard: Any, num_shards: Any, name: Optional[Any] = ...): ...

ShardedFilename: Any

def sharded_filename_eager_fallback(basename: Any, shard: Any, num_shards: Any, name: Any, ctx: Any): ...
def sharded_filespec(basename: Any, num_shards: Any, name: Optional[Any] = ...): ...

ShardedFilespec: Any

def sharded_filespec_eager_fallback(basename: Any, num_shards: Any, name: Any, ctx: Any): ...
def tf_record_reader(container: str = ..., shared_name: str = ..., compression_type: str = ..., name: Optional[Any] = ...): ...

TFRecordReader: Any

def tf_record_reader_eager_fallback(container: Any, shared_name: Any, compression_type: Any, name: Any, ctx: Any) -> None: ...
def tf_record_reader_v2(container: str = ..., shared_name: str = ..., compression_type: str = ..., name: Optional[Any] = ...): ...

TFRecordReaderV2: Any

def tf_record_reader_v2_eager_fallback(container: Any, shared_name: Any, compression_type: Any, name: Any, ctx: Any): ...
def text_line_reader(skip_header_lines: int = ..., container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

TextLineReader: Any

def text_line_reader_eager_fallback(skip_header_lines: Any, container: Any, shared_name: Any, name: Any, ctx: Any) -> None: ...
def text_line_reader_v2(skip_header_lines: int = ..., container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

TextLineReaderV2: Any

def text_line_reader_v2_eager_fallback(skip_header_lines: Any, container: Any, shared_name: Any, name: Any, ctx: Any): ...
def whole_file_reader(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

WholeFileReader: Any

def whole_file_reader_eager_fallback(container: Any, shared_name: Any, name: Any, ctx: Any) -> None: ...
def whole_file_reader_v2(container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

WholeFileReaderV2: Any

def whole_file_reader_v2_eager_fallback(container: Any, shared_name: Any, name: Any, ctx: Any): ...
def write_file(filename: Any, contents: Any, name: Optional[Any] = ...): ...

WriteFile: Any

def write_file_eager_fallback(filename: Any, contents: Any, name: Any, ctx: Any): ...
