from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def case(branch_index: Any, input: Any, Tout: Any, branches: Any, output_shapes: Any = ..., name: Optional[Any] = ...): ...

Case: Any

def case_eager_fallback(branch_index: Any, input: Any, Tout: Any, branches: Any, output_shapes: Any, name: Any, ctx: Any): ...
def fake_param(dtype: Any, shape: Any, name: Optional[Any] = ...): ...

FakeParam: Any

def fake_param_eager_fallback(dtype: Any, shape: Any, name: Any, ctx: Any): ...

For: Any
If: Any

def partitioned_call(args: Any, Tout: Any, f: Any, config: str = ..., config_proto: str = ..., executor_type: str = ..., name: Optional[Any] = ...): ...

PartitionedCall: Any

def partitioned_call_eager_fallback(args: Any, Tout: Any, f: Any, config: Any, config_proto: Any, executor_type: Any, name: Any, ctx: Any): ...
def remote_call(target: Any, args: Any, Tout: Any, f: Any, name: Optional[Any] = ...): ...

RemoteCall: Any

def remote_call_eager_fallback(target: Any, args: Any, Tout: Any, f: Any, name: Any, ctx: Any): ...
def stateful_partitioned_call(args: Any, Tout: Any, f: Any, config: str = ..., config_proto: str = ..., executor_type: str = ..., name: Optional[Any] = ...): ...

StatefulPartitionedCall: Any

def stateful_partitioned_call_eager_fallback(args: Any, Tout: Any, f: Any, config: Any, config_proto: Any, executor_type: Any, name: Any, ctx: Any): ...
def stateless_if(cond: Any, input: Any, Tout: Any, then_branch: Any, else_branch: Any, output_shapes: Any = ..., name: Optional[Any] = ...): ...

StatelessIf: Any

def stateless_if_eager_fallback(cond: Any, input: Any, Tout: Any, then_branch: Any, else_branch: Any, output_shapes: Any, name: Any, ctx: Any): ...
def stateless_while(input: Any, cond: Any, body: Any, output_shapes: Any = ..., parallel_iterations: int = ..., name: Optional[Any] = ...): ...

StatelessWhile: Any

def stateless_while_eager_fallback(input: Any, cond: Any, body: Any, output_shapes: Any, parallel_iterations: Any, name: Any, ctx: Any): ...
def symbolic_gradient(input: Any, Tout: Any, f: Any, name: Optional[Any] = ...): ...

SymbolicGradient: Any

def symbolic_gradient_eager_fallback(input: Any, Tout: Any, f: Any, name: Any, ctx: Any): ...
def to_bool(input: Any, name: Optional[Any] = ...): ...

ToBool: Any

def to_bool_eager_fallback(input: Any, name: Any, ctx: Any): ...

While: Any
