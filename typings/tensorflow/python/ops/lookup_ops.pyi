from tensorflow.python.ops.gen_lookup_ops import *
from tensorflow.python.eager import context as context
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, gen_lookup_ops as gen_lookup_ops, math_ops as math_ops, string_ops as string_ops
from tensorflow.python.training.saver import BaseSaverBuilder as BaseSaverBuilder
from tensorflow.python.training.tracking import base as trackable_base, tracking as trackable
from tensorflow.python.util import compat as compat
from tensorflow.python.util.deprecation import deprecated as deprecated
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def initialize_all_tables(name: str = ...): ...
def tables_initializer(name: str = ...): ...

class LookupInterface(trackable.TrackableResource):
    def __init__(self, key_dtype: Any, value_dtype: Any) -> None: ...
    @property
    def key_dtype(self): ...
    @property
    def value_dtype(self): ...
    @property
    def name(self): ...
    def size(self, name: Optional[Any] = ...) -> None: ...
    def lookup(self, keys: Any, name: Optional[Any] = ...) -> None: ...

class InitializableLookupTableBase(LookupInterface):
    def __init__(self, default_value: Any, initializer: Any) -> None: ...
    @property
    def default_value(self): ...
    def size(self, name: Optional[Any] = ...): ...
    def lookup(self, keys: Any, name: Optional[Any] = ...): ...

class InitializableLookupTableBaseV1(InitializableLookupTableBase):
    @property
    def initializer(self): ...

class StaticHashTable(InitializableLookupTableBase):
    def __init__(self, initializer: Any, default_value: Any, name: Optional[Any] = ...) -> None: ...
    @property
    def name(self): ...
    def export(self, name: Optional[Any] = ...): ...

class StaticHashTableV1(StaticHashTable):
    @property
    def initializer(self): ...

class HashTable(StaticHashTableV1):
    @property
    def init(self): ...

class TableInitializerBase(trackable_base.Trackable):
    def __init__(self, key_dtype: Any, value_dtype: Any) -> None: ...
    @property
    def key_dtype(self): ...
    @property
    def value_dtype(self): ...
    def initialize(self, table: Any) -> None: ...

class KeyValueTensorInitializer(TableInitializerBase):
    def __init__(self, keys: Any, values: Any, key_dtype: Optional[Any] = ..., value_dtype: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    def initialize(self, table: Any): ...

class TextFileIndex:
    WHOLE_LINE: int = ...
    LINE_NUMBER: int = ...

class TextFileInitializer(TableInitializerBase):
    def __init__(self, filename: Any, key_dtype: Any, key_index: Any, value_dtype: Any, value_index: Any, vocab_size: Optional[Any] = ..., delimiter: str = ..., name: Optional[Any] = ...) -> None: ...
    def initialize(self, table: Any): ...

class TextFileStringTableInitializer(TextFileInitializer):
    def __init__(self, filename: Any, key_column_index: Any = ..., value_column_index: Any = ..., vocab_size: Optional[Any] = ..., delimiter: str = ..., name: str = ...) -> None: ...

class TextFileIdTableInitializer(TextFileInitializer):
    def __init__(self, filename: Any, key_column_index: Any = ..., value_column_index: Any = ..., vocab_size: Optional[Any] = ..., delimiter: str = ..., name: str = ..., key_dtype: Any = ...) -> None: ...

class HasherSpec: ...

FastHashSpec: Any

class StrongHashSpec(HasherSpec):
    def __new__(cls, key: Any): ...

class IdTableWithHashBuckets(LookupInterface):
    def __init__(self, table: Any, num_oov_buckets: Any, hasher_spec: Any = ..., name: Optional[Any] = ..., key_dtype: Optional[Any] = ...) -> None: ...
    @property
    def initializer(self): ...
    @property
    def init(self): ...
    @property
    def resource_handle(self): ...
    @property
    def name(self): ...
    def size(self, name: Optional[Any] = ...): ...
    def lookup(self, keys: Any, name: Optional[Any] = ...): ...

class StaticVocabularyTable(LookupInterface):
    def __init__(self, initializer: Any, num_oov_buckets: Any, lookup_key_dtype: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    @property
    def resource_handle(self): ...
    @property
    def name(self): ...
    def size(self, name: Optional[Any] = ...): ...
    def lookup(self, keys: Any, name: Optional[Any] = ...): ...

class StaticVocabularyTableV1(StaticVocabularyTable):
    @property
    def initializer(self): ...

def index_table_from_file(vocabulary_file: Optional[Any] = ..., num_oov_buckets: int = ..., vocab_size: Optional[Any] = ..., default_value: int = ..., hasher_spec: Any = ..., key_dtype: Any = ..., name: Optional[Any] = ..., key_column_index: Any = ..., value_column_index: Any = ..., delimiter: str = ...): ...
def index_table_from_tensor(vocabulary_list: Any, num_oov_buckets: int = ..., default_value: int = ..., hasher_spec: Any = ..., dtype: Any = ..., name: Optional[Any] = ...): ...
def index_to_string_table_from_file(vocabulary_file: Any, vocab_size: Optional[Any] = ..., default_value: str = ..., name: Optional[Any] = ..., key_column_index: Any = ..., value_column_index: Any = ..., delimiter: str = ...): ...
def index_to_string_table_from_tensor(vocabulary_list: Any, default_value: str = ..., name: Optional[Any] = ...): ...

class MutableHashTable(LookupInterface):
    def __init__(self, key_dtype: Any, value_dtype: Any, default_value: Any, name: str = ..., checkpoint: bool = ...) -> None: ...
    @property
    def name(self): ...
    def size(self, name: Optional[Any] = ...): ...
    def remove(self, keys: Any, name: Optional[Any] = ...): ...
    def lookup(self, keys: Any, name: Optional[Any] = ...): ...
    def insert(self, keys: Any, values: Any, name: Optional[Any] = ...): ...
    def export(self, name: Optional[Any] = ...): ...
    class _Saveable(BaseSaverBuilder.SaveableObject):
        def __init__(self, table: Any, name: Any) -> None: ...
        def restore(self, restored_tensors: Any, restored_shapes: Any, name: Optional[Any] = ...): ...

class DenseHashTable(LookupInterface):
    def __init__(self, key_dtype: Any, value_dtype: Any, default_value: Any, empty_key: Any, deleted_key: Any, initial_num_buckets: Optional[Any] = ..., name: str = ..., checkpoint: bool = ...) -> None: ...
    @property
    def name(self): ...
    def size(self, name: Optional[Any] = ...): ...
    def lookup(self, keys: Any, name: Optional[Any] = ...): ...
    def insert_or_assign(self, keys: Any, values: Any, name: Optional[Any] = ...): ...
    def insert(self, keys: Any, values: Any, name: Optional[Any] = ...): ...
    def erase(self, keys: Any, name: Optional[Any] = ...): ...
    def remove(self, keys: Any, name: Optional[Any] = ...): ...
    def export(self, name: Optional[Any] = ...): ...
    class _Saveable(BaseSaverBuilder.SaveableObject):
        def __init__(self, table: Any, name: Any) -> None: ...
        def restore(self, restored_tensors: Any, restored_shapes: Any, name: Optional[Any] = ...): ...
