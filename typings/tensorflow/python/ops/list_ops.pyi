from tensorflow.python.ops.gen_list_ops import *
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.ops import array_ops as array_ops, gen_list_ops as gen_list_ops
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from typing import Any, Optional

control_flow_ops: Any

def empty_tensor_list(element_shape: Any, element_dtype: Any, max_num_elements: Optional[Any] = ..., name: Optional[Any] = ...): ...
def tensor_list_reserve(element_shape: Any, num_elements: Any, element_dtype: Any, name: Optional[Any] = ...): ...
def tensor_list_from_tensor(tensor: Any, element_shape: Any, name: Optional[Any] = ...): ...
def tensor_list_get_item(input_handle: Any, index: Any, element_dtype: Any, element_shape: Optional[Any] = ..., name: Optional[Any] = ...): ...
def tensor_list_pop_back(input_handle: Any, element_dtype: Any, name: Optional[Any] = ...): ...
def tensor_list_gather(input_handle: Any, indices: Any, element_dtype: Any, element_shape: Optional[Any] = ..., name: Optional[Any] = ...): ...
def tensor_list_scatter(tensor: Any, indices: Any, element_shape: Optional[Any] = ..., input_handle: Optional[Any] = ..., name: Optional[Any] = ...): ...
def tensor_list_stack(input_handle: Any, element_dtype: Any, num_elements: int = ..., element_shape: Optional[Any] = ..., name: Optional[Any] = ...): ...
def tensor_list_concat(input_handle: Any, element_dtype: Any, element_shape: Optional[Any] = ..., name: Optional[Any] = ...): ...
def tensor_list_split(tensor: Any, element_shape: Any, lengths: Any, name: Optional[Any] = ...): ...
def tensor_list_set_item(input_handle: Any, index: Any, item: Any, resize_if_index_out_of_bounds: bool = ..., name: Optional[Any] = ...): ...
