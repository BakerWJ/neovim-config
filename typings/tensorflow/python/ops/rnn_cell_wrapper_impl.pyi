from tensorflow.python.framework import ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.keras.utils import generic_utils as generic_utils
from tensorflow.python.ops import array_ops as array_ops, math_ops as math_ops, nn_ops as nn_ops, random_ops as random_ops, tensor_array_ops as tensor_array_ops
from tensorflow.python.util import nest as nest
from typing import Any, Optional

class DropoutWrapperBase:
    def __init__(self, cell: Any, input_keep_prob: float = ..., output_keep_prob: float = ..., state_keep_prob: float = ..., variational_recurrent: bool = ..., input_size: Optional[Any] = ..., dtype: Optional[Any] = ..., seed: Optional[Any] = ..., dropout_state_filter_visitor: Optional[Any] = ..., **kwargs: Any): ...
    @property
    def wrapped_cell(self): ...
    @property
    def state_size(self): ...
    @property
    def output_size(self): ...
    built: bool = ...
    def build(self, inputs_shape: Any) -> None: ...
    def zero_state(self, batch_size: Any, dtype: Any): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ...): ...

class ResidualWrapperBase:
    def __init__(self, cell: Any, residual_fn: Optional[Any] = ..., **kwargs: Any) -> None: ...
    @property
    def state_size(self): ...
    @property
    def output_size(self): ...
    def zero_state(self, batch_size: Any, dtype: Any): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ...): ...

class DeviceWrapperBase:
    def __init__(self, cell: Any, device: Any, **kwargs: Any) -> None: ...
    @property
    def state_size(self): ...
    @property
    def output_size(self): ...
    def zero_state(self, batch_size: Any, dtype: Any): ...
    def get_config(self): ...
