from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.ops import array_ops as array_ops, gen_array_ops as gen_array_ops, gen_string_ops as gen_string_ops, string_ops as string_ops
from tensorflow.python.ops.ragged import ragged_array_ops as ragged_array_ops, ragged_math_ops as ragged_math_ops, ragged_tensor as ragged_tensor
from tensorflow.python.util import deprecation as deprecation
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def string_bytes_split(input: Any, name: Optional[Any] = ...): ...
def unicode_encode(input: Any, output_encoding: Any, errors: str = ..., replacement_char: int = ..., name: Optional[Any] = ...): ...
def unicode_decode(input: Any, input_encoding: Any, errors: str = ..., replacement_char: int = ..., replace_control_characters: bool = ..., name: Optional[Any] = ...): ...
def unicode_decode_with_offsets(input: Any, input_encoding: Any, errors: str = ..., replacement_char: int = ..., replace_control_characters: bool = ..., name: Optional[Any] = ...): ...
def unicode_split(input: Any, input_encoding: Any, errors: str = ..., replacement_char: int = ..., name: Optional[Any] = ...): ...
def unicode_split_with_offsets(input: Any, input_encoding: Any, errors: str = ..., replacement_char: int = ..., name: Optional[Any] = ...): ...
def string_split_v2(input: Any, sep: Optional[Any] = ..., maxsplit: int = ..., name: Optional[Any] = ...): ...
def string_split(source: Any, sep: Optional[Any] = ..., skip_empty: bool = ..., delimiter: Optional[Any] = ..., result_type: str = ..., name: Optional[Any] = ...): ...
def strings_split_v1(input: Optional[Any] = ..., sep: Optional[Any] = ..., maxsplit: int = ..., result_type: str = ..., source: Optional[Any] = ..., name: Optional[Any] = ...): ...
def reduce_join(inputs: Any, axis: Optional[Any] = ..., keepdims: Optional[Any] = ..., separator: str = ..., name: Optional[Any] = ...): ...
def ngrams(data: Any, ngram_width: Any, separator: str = ..., pad_values: Optional[Any] = ..., padding_width: Optional[Any] = ..., preserve_short_sequences: bool = ..., name: Optional[Any] = ...): ...
