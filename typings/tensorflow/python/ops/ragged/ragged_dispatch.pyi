from collections import namedtuple
from tensorflow.python.framework import dtypes as dtypes, ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.ops import array_ops as array_ops, clip_ops as clip_ops, data_flow_ops as data_flow_ops, gen_bitwise_ops as gen_bitwise_ops, math_ops as math_ops, parsing_ops as parsing_ops, string_ops as string_ops, variables as variables
from tensorflow.python.ops.ragged import ragged_array_ops as ragged_array_ops, ragged_batch_gather_ops as ragged_batch_gather_ops, ragged_concat_ops as ragged_concat_ops, ragged_gather_ops as ragged_gather_ops, ragged_math_ops as ragged_math_ops, ragged_squeeze_op as ragged_squeeze_op, ragged_string_ops as ragged_string_ops, ragged_tensor as ragged_tensor, ragged_tensor_shape as ragged_tensor_shape, ragged_util as ragged_util, ragged_where_op as ragged_where_op
from tensorflow.python.util import deprecation as deprecation, dispatch as dispatch, tf_decorator as tf_decorator, tf_export as tf_export, tf_inspect as tf_inspect
from typing import Any

_ArgInfo = namedtuple('ArgInfo', ['name', 'position', 'is_list'])

class UnaryRaggedElementwiseDispatcher(dispatch.OpDispatcher):
    def __init__(self, original_op: Any, arg_is_list: bool = ...) -> None: ...
    def handle(self, args: Any, kwargs: Any): ...

class BinaryRaggedElementwiseDispatcher(dispatch.OpDispatcher):
    def __init__(self, original_op: Any) -> None: ...
    def handle(self, args: Any, kwargs: Any): ...

class RaggedDispatcher(dispatch.OpDispatcher):
    def __init__(self, original_op: Any, ragged_op: Any, ragged_args: Any) -> None: ...
    def handle(self, args: Any, kwargs: Any): ...
    def is_supported(self, args: Any, kwargs: Any): ...

def register_dispatchers() -> None: ...
def ragged_op_list(tf_version: int = ...): ...
