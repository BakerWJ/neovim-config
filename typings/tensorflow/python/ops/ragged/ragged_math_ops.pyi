from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, gen_ragged_math_ops as gen_ragged_math_ops, math_ops as math_ops
from tensorflow.python.ops.ragged import ragged_functional_ops as ragged_functional_ops, ragged_tensor as ragged_tensor, segment_id_ops as segment_id_ops
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def range(starts: Any, limits: Optional[Any] = ..., deltas: int = ..., dtype: Optional[Any] = ..., name: Optional[Any] = ..., row_splits_dtype: Any = ...): ...
def segment_sum(data: Any, segment_ids: Any, num_segments: Any, name: Optional[Any] = ...): ...
def segment_prod(data: Any, segment_ids: Any, num_segments: Any, name: Optional[Any] = ...): ...
def segment_min(data: Any, segment_ids: Any, num_segments: Any, name: Optional[Any] = ...): ...
def segment_max(data: Any, segment_ids: Any, num_segments: Any, name: Optional[Any] = ...): ...
def segment_mean(data: Any, segment_ids: Any, num_segments: Any, name: Optional[Any] = ...): ...
def segment_sqrt_n(data: Any, segment_ids: Any, num_segments: Any, name: Optional[Any] = ...): ...
def ragged_reduce_aggregate(reduce_op: Any, unsorted_segment_op: Any, rt_input: Any, axis: Any, keepdims: Any, separator: Optional[Any] = ..., name: Optional[Any] = ...): ...
def reduce_sum(input_tensor: Any, axis: Optional[Any] = ..., keepdims: Optional[Any] = ..., name: Optional[Any] = ...): ...
def reduce_prod(input_tensor: Any, axis: Optional[Any] = ..., keepdims: Optional[Any] = ..., name: Optional[Any] = ...): ...
def reduce_min(input_tensor: Any, axis: Optional[Any] = ..., keepdims: Optional[Any] = ..., name: Optional[Any] = ...): ...
def reduce_max(input_tensor: Any, axis: Optional[Any] = ..., keepdims: Optional[Any] = ..., name: Optional[Any] = ...): ...
def reduce_mean(input_tensor: Any, axis: Optional[Any] = ..., keepdims: Optional[Any] = ..., name: Optional[Any] = ...): ...
def reduce_all(input_tensor: Any, axis: Optional[Any] = ..., keepdims: Optional[Any] = ..., name: Optional[Any] = ...): ...
def reduce_any(input_tensor: Any, axis: Optional[Any] = ..., keepdims: Optional[Any] = ..., name: Optional[Any] = ...): ...
