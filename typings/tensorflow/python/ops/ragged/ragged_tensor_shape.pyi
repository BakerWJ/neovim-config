from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, ops as ops, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, control_flow_ops as control_flow_ops, math_ops as math_ops
from tensorflow.python.ops.ragged import ragged_array_ops as ragged_array_ops, ragged_config as ragged_config, ragged_tensor as ragged_tensor, ragged_util as ragged_util
from typing import Any, Optional

class RaggedTensorDynamicShape:
    def __init__(self, partitioned_dim_sizes: Any, inner_dim_sizes: Any, dim_size_dtype: Optional[Any] = ...) -> None: ...
    @staticmethod
    def from_dim_sizes(dim_sizes: Any): ...
    @classmethod
    def from_tensor(cls, rt_input: Any, dim_size_dtype: Optional[Any] = ...): ...
    def dimension_size(self, axis: Any): ...
    def is_ragged(self, axis: Any): ...
    @property
    def rank(self): ...
    @property
    def partitioned_dim_sizes(self): ...
    @property
    def inner_dim_sizes(self): ...
    @property
    def num_partitioned_dimensions(self): ...
    @property
    def num_inner_dimensions(self): ...
    @property
    def dim_size_dtype(self): ...
    def broadcast_to_rank(self, rank: Any): ...
    def broadcast_dimension(self, axis: Any, lengths: Any): ...
    def num_slices_in_dimension(self, axis: Any): ...
    def with_dim_size_dtype(self, dtype: Any): ...

def broadcast_dynamic_shape(shape_x: Any, shape_y: Any): ...
def broadcast_to(rt_input: Any, shape: Any, broadcast_inner_dimensions: bool = ...): ...
