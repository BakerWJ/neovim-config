from collections import namedtuple
from tensorflow.python.util.deprecation import deprecated_endpoints as deprecated_endpoints
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

def anonymous_iterator(output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

AnonymousIterator: Any

def anonymous_iterator_eager_fallback(output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...

_AnonymousIteratorV2Output = namedtuple('AnonymousIteratorV2', ['handle', 'deleter'])

def anonymous_iterator_v2(output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

AnonymousIteratorV2: Any

def anonymous_iterator_v2_eager_fallback(output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...

_AnonymousMemoryCacheOutput = namedtuple('AnonymousMemoryCache', ['handle', 'deleter'])

def anonymous_memory_cache(name: Optional[Any] = ...): ...

AnonymousMemoryCache: Any

def anonymous_memory_cache_eager_fallback(name: Any, ctx: Any): ...

_AnonymousMultiDeviceIteratorOutput = namedtuple('AnonymousMultiDeviceIterator', ['handle', 'deleter'])

def anonymous_multi_device_iterator(devices: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

AnonymousMultiDeviceIterator: Any

def anonymous_multi_device_iterator_eager_fallback(devices: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...

_AnonymousRandomSeedGeneratorOutput = namedtuple('AnonymousRandomSeedGenerator', ['handle', 'deleter'])

def anonymous_random_seed_generator(seed: Any, seed2: Any, name: Optional[Any] = ...): ...

AnonymousRandomSeedGenerator: Any

def anonymous_random_seed_generator_eager_fallback(seed: Any, seed2: Any, name: Any, ctx: Any): ...
def batch_dataset(input_dataset: Any, batch_size: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

BatchDataset: Any

def batch_dataset_eager_fallback(input_dataset: Any, batch_size: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def batch_dataset_v2(input_dataset: Any, batch_size: Any, drop_remainder: Any, output_types: Any, output_shapes: Any, parallel_copy: bool = ..., name: Optional[Any] = ...): ...

BatchDatasetV2: Any

def batch_dataset_v2_eager_fallback(input_dataset: Any, batch_size: Any, drop_remainder: Any, output_types: Any, output_shapes: Any, parallel_copy: Any, name: Any, ctx: Any): ...
def cache_dataset(input_dataset: Any, filename: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

CacheDataset: Any

def cache_dataset_eager_fallback(input_dataset: Any, filename: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def cache_dataset_v2(input_dataset: Any, filename: Any, cache: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

CacheDatasetV2: Any

def cache_dataset_v2_eager_fallback(input_dataset: Any, filename: Any, cache: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def concatenate_dataset(input_dataset: Any, another_dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

ConcatenateDataset: Any

def concatenate_dataset_eager_fallback(input_dataset: Any, another_dataset: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def dataset_to_graph(input_dataset: Any, stateful_whitelist: Any = ..., allow_stateful: bool = ..., strip_device_assignment: bool = ..., name: Optional[Any] = ...): ...

DatasetToGraph: Any

def dataset_to_graph_eager_fallback(input_dataset: Any, stateful_whitelist: Any, allow_stateful: Any, strip_device_assignment: Any, name: Any, ctx: Any): ...
def dataset_to_graph_v2(input_dataset: Any, external_state_policy: int = ..., strip_device_assignment: bool = ..., name: Optional[Any] = ...): ...

DatasetToGraphV2: Any

def dataset_to_graph_v2_eager_fallback(input_dataset: Any, external_state_policy: Any, strip_device_assignment: Any, name: Any, ctx: Any): ...
def dataset_to_single_element(dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

DatasetToSingleElement: Any

def dataset_to_single_element_eager_fallback(dataset: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def delete_iterator(handle: Any, deleter: Any, name: Optional[Any] = ...): ...

DeleteIterator: Any

def delete_iterator_eager_fallback(handle: Any, deleter: Any, name: Any, ctx: Any): ...
def delete_memory_cache(handle: Any, deleter: Any, name: Optional[Any] = ...): ...

DeleteMemoryCache: Any

def delete_memory_cache_eager_fallback(handle: Any, deleter: Any, name: Any, ctx: Any): ...
def delete_multi_device_iterator(multi_device_iterator: Any, iterators: Any, deleter: Any, name: Optional[Any] = ...): ...

DeleteMultiDeviceIterator: Any

def delete_multi_device_iterator_eager_fallback(multi_device_iterator: Any, iterators: Any, deleter: Any, name: Any, ctx: Any): ...
def delete_random_seed_generator(handle: Any, deleter: Any, name: Optional[Any] = ...): ...

DeleteRandomSeedGenerator: Any

def delete_random_seed_generator_eager_fallback(handle: Any, deleter: Any, name: Any, ctx: Any): ...
def deserialize_iterator(resource_handle: Any, serialized: Any, name: Optional[Any] = ...): ...

DeserializeIterator: Any

def deserialize_iterator_eager_fallback(resource_handle: Any, serialized: Any, name: Any, ctx: Any): ...
def dummy_memory_cache(name: Optional[Any] = ...): ...

DummyMemoryCache: Any

def dummy_memory_cache_eager_fallback(name: Any, ctx: Any): ...
def filter_by_last_component_dataset(input_dataset: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

FilterByLastComponentDataset: Any

def filter_by_last_component_dataset_eager_fallback(input_dataset: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def filter_dataset(input_dataset: Any, other_arguments: Any, predicate: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

FilterDataset: Any

def filter_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, predicate: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def fixed_length_record_dataset(filenames: Any, header_bytes: Any, record_bytes: Any, footer_bytes: Any, buffer_size: Any, name: Optional[Any] = ...): ...

FixedLengthRecordDataset: Any

def fixed_length_record_dataset_eager_fallback(filenames: Any, header_bytes: Any, record_bytes: Any, footer_bytes: Any, buffer_size: Any, name: Any, ctx: Any): ...
def fixed_length_record_dataset_v2(filenames: Any, header_bytes: Any, record_bytes: Any, footer_bytes: Any, buffer_size: Any, compression_type: Any, name: Optional[Any] = ...): ...

FixedLengthRecordDatasetV2: Any

def fixed_length_record_dataset_v2_eager_fallback(filenames: Any, header_bytes: Any, record_bytes: Any, footer_bytes: Any, buffer_size: Any, compression_type: Any, name: Any, ctx: Any): ...
def flat_map_dataset(input_dataset: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

FlatMapDataset: Any

def flat_map_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def generator_dataset(init_func_other_args: Any, next_func_other_args: Any, finalize_func_other_args: Any, init_func: Any, next_func: Any, finalize_func: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

GeneratorDataset: Any

def generator_dataset_eager_fallback(init_func_other_args: Any, next_func_other_args: Any, finalize_func_other_args: Any, init_func: Any, next_func: Any, finalize_func: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def interleave_dataset(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, f: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

InterleaveDataset: Any

def interleave_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, f: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def iterator(shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

Iterator: Any

def iterator_eager_fallback(shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def iterator_from_string_handle(string_handle: Any, output_types: Any = ..., output_shapes: Any = ..., name: Optional[Any] = ...): ...

IteratorFromStringHandle: Any

def iterator_from_string_handle_eager_fallback(string_handle: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def iterator_from_string_handle_v2(string_handle: Any, output_types: Any = ..., output_shapes: Any = ..., name: Optional[Any] = ...): ...

IteratorFromStringHandleV2: Any

def iterator_from_string_handle_v2_eager_fallback(string_handle: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def iterator_get_next(iterator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

IteratorGetNext: Any

def iterator_get_next_eager_fallback(iterator: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def iterator_get_next_as_optional(iterator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

IteratorGetNextAsOptional: Any

def iterator_get_next_as_optional_eager_fallback(iterator: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def iterator_get_next_sync(iterator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

IteratorGetNextSync: Any

def iterator_get_next_sync_eager_fallback(iterator: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def iterator_to_string_handle(resource_handle: Any, name: Optional[Any] = ...): ...

IteratorToStringHandle: Any

def iterator_to_string_handle_eager_fallback(resource_handle: Any, name: Any, ctx: Any): ...
def iterator_v2(shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

IteratorV2: Any

def iterator_v2_eager_fallback(shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def make_iterator(dataset: Any, iterator: Any, name: Optional[Any] = ...): ...

MakeIterator: Any

def make_iterator_eager_fallback(dataset: Any, iterator: Any, name: Any, ctx: Any): ...
def map_dataset(input_dataset: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: bool = ..., preserve_cardinality: bool = ..., name: Optional[Any] = ...): ...

MapDataset: Any

def map_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: Any, preserve_cardinality: Any, name: Any, ctx: Any): ...
def map_defun(arguments: Any, captured_inputs: Any, output_types: Any, output_shapes: Any, f: Any, max_intra_op_parallelism: int = ..., name: Optional[Any] = ...): ...

MapDefun: Any

def map_defun_eager_fallback(arguments: Any, captured_inputs: Any, output_types: Any, output_shapes: Any, f: Any, max_intra_op_parallelism: Any, name: Any, ctx: Any): ...
def model_dataset(input_dataset: Any, output_types: Any, output_shapes: Any, algorithm: int = ..., cpu_budget: int = ..., name: Optional[Any] = ...): ...

ModelDataset: Any

def model_dataset_eager_fallback(input_dataset: Any, output_types: Any, output_shapes: Any, algorithm: Any, cpu_budget: Any, name: Any, ctx: Any): ...
def multi_device_iterator(devices: Any, shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

MultiDeviceIterator: Any

def multi_device_iterator_eager_fallback(devices: Any, shared_name: Any, container: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def multi_device_iterator_from_string_handle(string_handle: Any, output_types: Any = ..., output_shapes: Any = ..., name: Optional[Any] = ...): ...

MultiDeviceIteratorFromStringHandle: Any

def multi_device_iterator_from_string_handle_eager_fallback(string_handle: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def multi_device_iterator_get_next_from_shard(multi_device_iterator: Any, shard_num: Any, incarnation_id: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

MultiDeviceIteratorGetNextFromShard: Any

def multi_device_iterator_get_next_from_shard_eager_fallback(multi_device_iterator: Any, shard_num: Any, incarnation_id: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def multi_device_iterator_init(dataset: Any, multi_device_iterator: Any, max_buffer_size: Any, name: Optional[Any] = ...): ...

MultiDeviceIteratorInit: Any

def multi_device_iterator_init_eager_fallback(dataset: Any, multi_device_iterator: Any, max_buffer_size: Any, name: Any, ctx: Any): ...
def multi_device_iterator_to_string_handle(multi_device_iterator: Any, name: Optional[Any] = ...): ...

MultiDeviceIteratorToStringHandle: Any

def multi_device_iterator_to_string_handle_eager_fallback(multi_device_iterator: Any, name: Any, ctx: Any): ...
def one_shot_iterator(dataset_factory: Any, output_types: Any, output_shapes: Any, container: str = ..., shared_name: str = ..., name: Optional[Any] = ...): ...

OneShotIterator: Any

def one_shot_iterator_eager_fallback(dataset_factory: Any, output_types: Any, output_shapes: Any, container: Any, shared_name: Any, name: Any, ctx: Any): ...
def optimize_dataset(input_dataset: Any, optimizations: Any, output_types: Any, output_shapes: Any, optimization_configs: Any = ..., name: Optional[Any] = ...): ...

OptimizeDataset: Any

def optimize_dataset_eager_fallback(input_dataset: Any, optimizations: Any, output_types: Any, output_shapes: Any, optimization_configs: Any, name: Any, ctx: Any): ...
def optional_from_value(components: Any, name: Optional[Any] = ...): ...

OptionalFromValue: Any

def optional_from_value_eager_fallback(components: Any, name: Any, ctx: Any): ...
def optional_get_value(optional: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

OptionalGetValue: Any

def optional_get_value_eager_fallback(optional: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def optional_has_value(optional: Any, name: Optional[Any] = ...): ...

OptionalHasValue: Any

def optional_has_value_eager_fallback(optional: Any, name: Any, ctx: Any): ...
def optional_none(name: Optional[Any] = ...): ...

OptionalNone: Any

def optional_none_eager_fallback(name: Any, ctx: Any): ...
def padded_batch_dataset(input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, output_shapes: Any, name: Optional[Any] = ...): ...

PaddedBatchDataset: Any

def padded_batch_dataset_eager_fallback(input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, output_shapes: Any, name: Any, ctx: Any): ...
def padded_batch_dataset_v2(input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, drop_remainder: Any, output_shapes: Any, parallel_copy: bool = ..., name: Optional[Any] = ...): ...

PaddedBatchDatasetV2: Any

def padded_batch_dataset_v2_eager_fallback(input_dataset: Any, batch_size: Any, padded_shapes: Any, padding_values: Any, drop_remainder: Any, output_shapes: Any, parallel_copy: Any, name: Any, ctx: Any): ...
def parallel_interleave_dataset_v2(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, sloppy: bool = ..., name: Optional[Any] = ...): ...

ParallelInterleaveDatasetV2: Any

def parallel_interleave_dataset_v2_eager_fallback(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, sloppy: Any, name: Any, ctx: Any): ...
def parallel_interleave_dataset_v3(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, deterministic: str = ..., name: Optional[Any] = ...): ...

ParallelInterleaveDatasetV3: Any

def parallel_interleave_dataset_v3_eager_fallback(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, deterministic: Any, name: Any, ctx: Any): ...
def parallel_interleave_dataset_v4(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, buffer_output_elements: Any, prefetch_input_elements: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, deterministic: str = ..., name: Optional[Any] = ...): ...

ParallelInterleaveDatasetV4: Any

def parallel_interleave_dataset_v4_eager_fallback(input_dataset: Any, other_arguments: Any, cycle_length: Any, block_length: Any, buffer_output_elements: Any, prefetch_input_elements: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, deterministic: Any, name: Any, ctx: Any): ...
def parallel_map_dataset(input_dataset: Any, other_arguments: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: bool = ..., sloppy: bool = ..., preserve_cardinality: bool = ..., name: Optional[Any] = ...): ...

ParallelMapDataset: Any

def parallel_map_dataset_eager_fallback(input_dataset: Any, other_arguments: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: Any, sloppy: Any, preserve_cardinality: Any, name: Any, ctx: Any): ...
def parallel_map_dataset_v2(input_dataset: Any, other_arguments: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: bool = ..., deterministic: str = ..., preserve_cardinality: bool = ..., name: Optional[Any] = ...): ...

ParallelMapDatasetV2: Any

def parallel_map_dataset_v2_eager_fallback(input_dataset: Any, other_arguments: Any, num_parallel_calls: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: Any, deterministic: Any, preserve_cardinality: Any, name: Any, ctx: Any): ...
def prefetch_dataset(input_dataset: Any, buffer_size: Any, output_types: Any, output_shapes: Any, slack_period: int = ..., legacy_autotune: bool = ..., name: Optional[Any] = ...): ...

PrefetchDataset: Any

def prefetch_dataset_eager_fallback(input_dataset: Any, buffer_size: Any, output_types: Any, output_shapes: Any, slack_period: Any, legacy_autotune: Any, name: Any, ctx: Any): ...
def range_dataset(start: Any, stop: Any, step: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

RangeDataset: Any

def range_dataset_eager_fallback(start: Any, stop: Any, step: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def reduce_dataset(input_dataset: Any, initial_state: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: bool = ..., name: Optional[Any] = ...): ...

ReduceDataset: Any

def reduce_dataset_eager_fallback(input_dataset: Any, initial_state: Any, other_arguments: Any, f: Any, output_types: Any, output_shapes: Any, use_inter_op_parallelism: Any, name: Any, ctx: Any): ...
def repeat_dataset(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

RepeatDataset: Any

def repeat_dataset_eager_fallback(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def serialize_iterator(resource_handle: Any, external_state_policy: int = ..., name: Optional[Any] = ...): ...

SerializeIterator: Any

def serialize_iterator_eager_fallback(resource_handle: Any, external_state_policy: Any, name: Any, ctx: Any): ...
def shard_dataset(input_dataset: Any, num_shards: Any, index: Any, output_types: Any, output_shapes: Any, require_non_empty: bool = ..., name: Optional[Any] = ...): ...

ShardDataset: Any

def shard_dataset_eager_fallback(input_dataset: Any, num_shards: Any, index: Any, output_types: Any, output_shapes: Any, require_non_empty: Any, name: Any, ctx: Any): ...
def shuffle_and_repeat_dataset(input_dataset: Any, buffer_size: Any, seed: Any, seed2: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

ShuffleAndRepeatDataset: Any

def shuffle_and_repeat_dataset_eager_fallback(input_dataset: Any, buffer_size: Any, seed: Any, seed2: Any, count: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def shuffle_dataset(input_dataset: Any, buffer_size: Any, seed: Any, seed2: Any, output_types: Any, output_shapes: Any, reshuffle_each_iteration: bool = ..., name: Optional[Any] = ...): ...

ShuffleDataset: Any

def shuffle_dataset_eager_fallback(input_dataset: Any, buffer_size: Any, seed: Any, seed2: Any, output_types: Any, output_shapes: Any, reshuffle_each_iteration: Any, name: Any, ctx: Any): ...
def shuffle_dataset_v2(input_dataset: Any, buffer_size: Any, seed_generator: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

ShuffleDatasetV2: Any

def shuffle_dataset_v2_eager_fallback(input_dataset: Any, buffer_size: Any, seed_generator: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def skip_dataset(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

SkipDataset: Any

def skip_dataset_eager_fallback(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def sparse_tensor_slice_dataset(indices: Any, values: Any, dense_shape: Any, name: Optional[Any] = ...): ...

SparseTensorSliceDataset: Any

def sparse_tensor_slice_dataset_eager_fallback(indices: Any, values: Any, dense_shape: Any, name: Any, ctx: Any): ...
def tf_record_dataset(filenames: Any, compression_type: Any, buffer_size: Any, name: Optional[Any] = ...): ...

TFRecordDataset: Any

def tf_record_dataset_eager_fallback(filenames: Any, compression_type: Any, buffer_size: Any, name: Any, ctx: Any): ...
def take_dataset(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

TakeDataset: Any

def take_dataset_eager_fallback(input_dataset: Any, count: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def tensor_dataset(components: Any, output_shapes: Any, name: Optional[Any] = ...): ...

TensorDataset: Any

def tensor_dataset_eager_fallback(components: Any, output_shapes: Any, name: Any, ctx: Any): ...
def tensor_slice_dataset(components: Any, output_shapes: Any, name: Optional[Any] = ...): ...

TensorSliceDataset: Any

def tensor_slice_dataset_eager_fallback(components: Any, output_shapes: Any, name: Any, ctx: Any): ...
def text_line_dataset(filenames: Any, compression_type: Any, buffer_size: Any, name: Optional[Any] = ...): ...

TextLineDataset: Any

def text_line_dataset_eager_fallback(filenames: Any, compression_type: Any, buffer_size: Any, name: Any, ctx: Any): ...
def unwrap_dataset_variant(input_handle: Any, name: Optional[Any] = ...): ...

UnwrapDatasetVariant: Any

def unwrap_dataset_variant_eager_fallback(input_handle: Any, name: Any, ctx: Any): ...
def window_dataset(input_dataset: Any, size: Any, shift: Any, stride: Any, drop_remainder: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

WindowDataset: Any

def window_dataset_eager_fallback(input_dataset: Any, size: Any, shift: Any, stride: Any, drop_remainder: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
def wrap_dataset_variant(input_handle: Any, name: Optional[Any] = ...): ...

WrapDatasetVariant: Any

def wrap_dataset_variant_eager_fallback(input_handle: Any, name: Any, ctx: Any): ...
def zip_dataset(input_datasets: Any, output_types: Any, output_shapes: Any, name: Optional[Any] = ...): ...

ZipDataset: Any

def zip_dataset_eager_fallback(input_datasets: Any, output_types: Any, output_shapes: Any, name: Any, ctx: Any): ...
