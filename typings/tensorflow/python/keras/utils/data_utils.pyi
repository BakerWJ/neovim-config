import abc
from abc import abstractmethod
from six.moves.urllib.request import urlopen as urlopen
from tensorflow.python.framework import ops as ops
from tensorflow.python.keras.utils.generic_utils import Progbar as Progbar
from tensorflow.python.util import tf_inspect as tf_inspect
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any, Optional

is_iterator: Any

def is_generator_or_sequence(x: Any): ...
def get_file(fname: Any, origin: Any, untar: bool = ..., md5_hash: Optional[Any] = ..., file_hash: Optional[Any] = ..., cache_subdir: str = ..., hash_algorithm: str = ..., extract: bool = ..., archive_format: str = ..., cache_dir: Optional[Any] = ...): ...
def validate_file(fpath: Any, file_hash: Any, algorithm: str = ..., chunk_size: int = ...): ...

class ThreadsafeIter:
    it: Any = ...
    lock: Any = ...
    def __init__(self, it: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
    def next(self): ...

def threadsafe_generator(f: Any): ...

class Sequence(metaclass=abc.ABCMeta):
    @abstractmethod
    def __getitem__(self, index: Any) -> Any: ...
    @abstractmethod
    def __len__(self) -> Any: ...
    def on_epoch_end(self) -> None: ...
    def __iter__(self) -> Any: ...

def iter_sequence_infinite(seq: Any) -> None: ...
def dont_use_multiprocessing_pool(f: Any): ...
def get_pool_class(use_multiprocessing: Any): ...
def get_worker_id_queue(): ...
def init_pool(seqs: Any) -> None: ...
def terminate_keras_multiprocessing_pools(grace_period: float = ..., use_sigkill: bool = ...): ...
def get_index(uid: Any, i: Any): ...

class SequenceEnqueuer(metaclass=abc.ABCMeta):
    sequence: Any = ...
    use_multiprocessing: Any = ...
    uid: Any = ...
    workers: int = ...
    executor_fn: Any = ...
    queue: Any = ...
    run_thread: Any = ...
    stop_signal: Any = ...
    def __init__(self, sequence: Any, use_multiprocessing: bool = ...) -> None: ...
    def is_running(self): ...
    def start(self, workers: int = ..., max_queue_size: int = ...): ...
    def stop(self, timeout: Optional[Any] = ...) -> None: ...
    def __del__(self) -> None: ...
    @abstractmethod
    def get(self) -> Any: ...

class OrderedEnqueuer(SequenceEnqueuer):
    shuffle: Any = ...
    def __init__(self, sequence: Any, use_multiprocessing: bool = ..., shuffle: bool = ...) -> None: ...
    def get(self) -> None: ...

def init_pool_generator(gens: Any, random_seed: Optional[Any] = ..., id_queue: Optional[Any] = ...) -> None: ...
def next_sample(uid: Any): ...

class GeneratorEnqueuer(SequenceEnqueuer):
    random_seed: Any = ...
    def __init__(self, sequence: Any, use_multiprocessing: bool = ..., random_seed: Optional[Any] = ...) -> None: ...
    def get(self) -> None: ...
