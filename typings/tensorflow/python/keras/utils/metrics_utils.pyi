from enum import Enum
from tensorflow.python.distribute import distribution_strategy_context as distribution_strategy_context
from tensorflow.python.framework import dtypes as dtypes, ops as ops
from tensorflow.python.keras.utils import tf_utils as tf_utils
from tensorflow.python.keras.utils.generic_utils import to_list as to_list
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, gen_math_ops as gen_math_ops, math_ops as math_ops, nn_ops as nn_ops, weights_broadcast_ops as weights_broadcast_ops
from tensorflow.python.ops.ragged import ragged_tensor as ragged_tensor, ragged_util as ragged_util
from tensorflow.python.tpu import tpu as tpu
from tensorflow.python.util import tf_decorator as tf_decorator
from typing import Any, Optional

NEG_INF: Any

class Reduction(Enum):
    SUM: str = ...
    SUM_OVER_BATCH_SIZE: str = ...
    WEIGHTED_MEAN: str = ...

def update_state_wrapper(update_state_fn: Any): ...
def result_wrapper(result_fn: Any): ...
def weakmethod(method: Any): ...
def assert_thresholds_range(thresholds: Any) -> None: ...
def parse_init_thresholds(thresholds: Any, default_threshold: float = ...): ...

class ConfusionMatrix(Enum):
    TRUE_POSITIVES: str = ...
    FALSE_POSITIVES: str = ...
    TRUE_NEGATIVES: str = ...
    FALSE_NEGATIVES: str = ...

class AUCCurve(Enum):
    ROC: str = ...
    PR: str = ...
    @staticmethod
    def from_str(key: Any): ...

class AUCSummationMethod(Enum):
    INTERPOLATION: str = ...
    MAJORING: str = ...
    MINORING: str = ...
    @staticmethod
    def from_str(key: Any): ...

def update_confusion_matrix_variables(variables_to_update: Any, y_true: Any, y_pred: Any, thresholds: Any, top_k: Optional[Any] = ..., class_id: Optional[Any] = ..., sample_weight: Optional[Any] = ..., multi_label: bool = ..., label_weights: Optional[Any] = ...): ...
def ragged_assert_compatible_and_get_flat_values(values: Any, mask: Optional[Any] = ...): ...
