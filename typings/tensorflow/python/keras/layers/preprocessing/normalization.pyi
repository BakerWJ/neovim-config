from tensorflow.python.framework import dtypes as dtypes
from tensorflow.python.keras.engine.base_preprocessing_layer import Combiner as Combiner, CombinerPreprocessingLayer as CombinerPreprocessingLayer
from tensorflow.python.ops import array_ops as array_ops, init_ops as init_ops, math_ops as math_ops
from tensorflow.python.util import compat as compat
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any, Optional

class Normalization(CombinerPreprocessingLayer):
    axis: Any = ...
    def __init__(self, axis: int = ..., dtype: Optional[Any] = ..., **kwargs: Any) -> None: ...
    mean: Any = ...
    variance: Any = ...
    count: Any = ...
    def build(self, input_shape: Any) -> None: ...
    def call(self, inputs: Any): ...
    def compute_output_shape(self, input_shape: Any): ...
    def compute_output_signature(self, input_spec: Any): ...
    def get_config(self): ...
    def set_weights(self, weights: Any) -> None: ...

class _NormalizingAccumulator: ...

class _NormalizingCombiner(Combiner):
    axis: Any = ...
    def __init__(self, axis: Any) -> None: ...
    def compute(self, values: Any, accumulator: Optional[Any] = ...): ...
    def merge(self, accumulators: Any): ...
    def extract(self, accumulator: Any): ...
    def restore(self, output: Any): ...
    def serialize(self, accumulator: Any): ...
    def deserialize(self, encoded_accumulator: Any): ...
