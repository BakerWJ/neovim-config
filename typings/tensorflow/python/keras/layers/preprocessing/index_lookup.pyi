from tensorflow.python.framework import dtypes as dtypes, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape, tensor_spec as tensor_spec
from tensorflow.python.keras.engine import base_preprocessing_layer as base_preprocessing_layer
from tensorflow.python.ops import array_ops as array_ops, lookup_ops as lookup_ops, math_ops as math_ops, string_ops as string_ops
from tensorflow.python.ops.ragged import ragged_functional_ops as ragged_functional_ops, ragged_tensor as ragged_tensor
from tensorflow.python.platform import gfile as gfile
from tensorflow.python.util import compat as compat
from typing import Any, Optional

class IndexLookup(base_preprocessing_layer.CombinerPreprocessingLayer):
    max_tokens: Any = ...
    num_oov_tokens: Any = ...
    reserve_zero: Any = ...
    mask_zero: Any = ...
    def __init__(self, max_tokens: Optional[Any] = ..., num_oov_tokens: int = ..., vocabulary: Optional[Any] = ..., reserve_zero: bool = ..., mask_zero: bool = ..., **kwargs: Any) -> None: ...
    def vocab_size(self): ...
    def compute_output_shape(self, input_shape: Any): ...
    def compute_output_signature(self, input_spec: Any, invert: bool = ...): ...
    def adapt(self, data: Any, reset_state: bool = ...) -> None: ...
    def get_vocabulary(self): ...
    def get_config(self): ...
    def count_params(self): ...
    def set_vocabulary(self, vocab: Any, append: bool = ...) -> None: ...
    def __call__(self, inputs: Any, invert: bool = ..., **kwargs: Any): ...
    def replace_oov_buckets(self, inputs: Any, lookups: Any): ...
    def call(self, inputs: Any, invert: bool = ...): ...

class _IndexLookupAccumulator: ...

class _IndexLookupCombiner(base_preprocessing_layer.Combiner):
    def __init__(self, vocab_size: Optional[Any] = ...) -> None: ...
    def compute(self, values: Any, accumulator: Optional[Any] = ...): ...
    def merge(self, accumulators: Any): ...
    def extract(self, accumulator: Any): ...
    def restore(self, output: Any) -> None: ...
    def serialize(self, accumulator: Any): ...
    def deserialize(self, encoded_accumulator: Any): ...
