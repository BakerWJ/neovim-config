from tensorflow.python.keras import backend as backend, layers as layers
from tensorflow.python.keras.applications import imagenet_utils as imagenet_utils
from tensorflow.python.keras.engine import training as training
from tensorflow.python.keras.utils import data_utils as data_utils, layer_utils as layer_utils
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any, Optional

BASE_WEIGHTS_PATH: str
WEIGHTS_HASHES: Any

def ResNet(stack_fn: Any, preact: Any, use_bias: Any, model_name: str = ..., include_top: bool = ..., weights: str = ..., input_tensor: Optional[Any] = ..., input_shape: Optional[Any] = ..., pooling: Optional[Any] = ..., classes: int = ..., classifier_activation: str = ..., **kwargs: Any): ...
def block1(x: Any, filters: Any, kernel_size: int = ..., stride: int = ..., conv_shortcut: bool = ..., name: Optional[Any] = ...): ...
def stack1(x: Any, filters: Any, blocks: Any, stride1: int = ..., name: Optional[Any] = ...): ...
def block2(x: Any, filters: Any, kernel_size: int = ..., stride: int = ..., conv_shortcut: bool = ..., name: Optional[Any] = ...): ...
def stack2(x: Any, filters: Any, blocks: Any, stride1: int = ..., name: Optional[Any] = ...): ...
def block3(x: Any, filters: Any, kernel_size: int = ..., stride: int = ..., groups: int = ..., conv_shortcut: bool = ..., name: Optional[Any] = ...): ...
def stack3(x: Any, filters: Any, blocks: Any, stride1: int = ..., groups: int = ..., name: Optional[Any] = ...): ...
def ResNet50(include_top: bool = ..., weights: str = ..., input_tensor: Optional[Any] = ..., input_shape: Optional[Any] = ..., pooling: Optional[Any] = ..., classes: int = ..., **kwargs: Any): ...
def ResNet101(include_top: bool = ..., weights: str = ..., input_tensor: Optional[Any] = ..., input_shape: Optional[Any] = ..., pooling: Optional[Any] = ..., classes: int = ..., **kwargs: Any): ...
def ResNet152(include_top: bool = ..., weights: str = ..., input_tensor: Optional[Any] = ..., input_shape: Optional[Any] = ..., pooling: Optional[Any] = ..., classes: int = ..., **kwargs: Any): ...
def preprocess_input(x: Any, data_format: Optional[Any] = ...): ...
def decode_predictions(preds: Any, top: int = ...): ...

DOC: str
