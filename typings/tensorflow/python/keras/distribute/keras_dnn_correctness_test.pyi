from tensorflow.python import keras as keras
from tensorflow.python.data.ops import dataset_ops as dataset_ops
from tensorflow.python.distribute import combinations as combinations, distribution_strategy_context as distribution_strategy_context
from tensorflow.python.eager import context as context
from tensorflow.python.keras.distribute import keras_correctness_test_base as keras_correctness_test_base
from tensorflow.python.platform import test as test
from tensorflow.python.training import gradient_descent as gradient_descent
from typing import Any, Optional

def all_strategy_combinations_with_eager_and_graph_modes(): ...
def all_strategy_combinations_with_graph_mode(): ...
def is_default_strategy(strategy: Any): ...

class TestDistributionStrategyDnnCorrectness(keras_correctness_test_base.TestDistributionStrategyCorrectnessBase):
    def get_model(self, initial_weights: Optional[Any] = ..., distribution: Optional[Any] = ..., input_shapes: Optional[Any] = ...): ...
    def get_data(self): ...
    def get_data_with_partial_last_batch(self): ...
    def get_data_with_partial_last_batch_eval(self): ...
    def test_dnn_correctness(self, distribution: Any, use_numpy: Any, use_validation_data: Any) -> None: ...
    def test_dnn_correctness_with_partial_last_batch_eval(self, distribution: Any, use_numpy: Any, use_validation_data: Any) -> None: ...
    def test_dnn_correctness_with_partial_last_batch(self, distribution: Any, use_numpy: Any, use_validation_data: Any) -> None: ...
    def test_dnn_with_dynamic_learning_rate(self, distribution: Any) -> None: ...

class TestDistributionStrategyDnnMetricCorrectness(keras_correctness_test_base.TestDistributionStrategyCorrectnessBase):
    def get_model(self, distribution: Optional[Any] = ..., input_shapes: Optional[Any] = ...): ...
    def run_metric_correctness_test(self, distribution: Any) -> None: ...
    def test_simple_dnn_metric_correctness(self, distribution: Any) -> None: ...

class TestDistributionStrategyDnnMetricEvalCorrectness(keras_correctness_test_base.TestDistributionStrategyCorrectnessBase):
    def get_model(self, distribution: Optional[Any] = ..., input_shapes: Optional[Any] = ...): ...
    def run_eval_metrics_correctness_test(self, distribution: Any) -> None: ...
    def test_identity_model_metric_eval_correctness(self, distribution: Any) -> None: ...

class SubclassedModel(keras.Model):
    dense1: Any = ...
    dense2: Any = ...
    dense3: Any = ...
    dense4: Any = ...
    def __init__(self, initial_weights: Any, input_shapes: Any) -> None: ...
    def call(self, inputs: Any): ...

class TestDistributionStrategyDnnCorrectnessWithSubclassedModel(TestDistributionStrategyDnnCorrectness):
    def get_model(self, initial_weights: Optional[Any] = ..., distribution: Optional[Any] = ..., input_shapes: Optional[Any] = ...): ...
    def test_dnn_correctness(self, distribution: Any, use_numpy: Any, use_validation_data: Any) -> None: ...
    def test_dnn_with_dynamic_learning_rate(self, distribution: Any) -> None: ...
    def test_dnn_correctness_with_partial_last_batch_eval(self, distribution: Any, use_numpy: Any, use_validation_data: Any) -> None: ...
