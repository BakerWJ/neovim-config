from tensorflow.python.distribute import collective_all_reduce_strategy as collective_all_reduce_strategy, distribution_strategy_context as distribution_strategy_context, mirrored_strategy as mirrored_strategy, one_device_strategy as one_device_strategy
from tensorflow.python.framework import smart_cond as smart_cond
from tensorflow.python.keras import backend as backend, optimizers as optimizers
from tensorflow.python.keras.optimizer_v2 import optimizer_v2 as optimizer_v2
from tensorflow.python.ops import control_flow_ops as control_flow_ops, math_ops as math_ops
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any, Optional

class _UnwrapPreventer:
    value: Any = ...
    def __init__(self, value: Any) -> None: ...

class LossScaleOptimizer(optimizer_v2.OptimizerV2):
    clipnorm: Any = ...
    clipvalue: Any = ...
    def __init__(self, optimizer: Any, loss_scale: Any) -> None: ...
    @property
    def loss_scale(self): ...
    def get_scaled_loss(self, loss: Any): ...
    def get_unscaled_gradients(self, grads: Any): ...
    def get_gradients(self, loss: Any, params: Any): ...
    def apply_gradients(self, grads_and_vars: Any, name: Optional[Any] = ..., experimental_aggregate_gradients: bool = ...): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ...): ...
    @property
    def iterations(self): ...
    @iterations.setter
    def iterations(self, variable: Any) -> None: ...
    def get_slot_names(self): ...
    def variables(self): ...
    @property
    def weights(self): ...
    def get_weights(self): ...
    def set_weights(self, weights: Any): ...
    @property
    def learning_rate(self): ...
    @learning_rate.setter
    def learning_rate(self, lr: Any) -> None: ...
    @property
    def lr(self): ...
    @lr.setter
    def lr(self, lr: Any) -> None: ...
    def get_slot(self, var: Any, slot_name: Any) -> None: ...
    def add_slot(self, var: Any, slot_name: Any, initializer: str = ...) -> None: ...

def strategy_supports_loss_scaling(): ...
