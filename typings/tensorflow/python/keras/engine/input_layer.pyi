from tensorflow.python.distribute import distribution_strategy_context as distribution_strategy_context
from tensorflow.python.framework import tensor_shape as tensor_shape
from tensorflow.python.keras import backend as backend
from tensorflow.python.keras.distribute import distributed_training_utils as distributed_training_utils
from tensorflow.python.keras.engine import base_layer as base_layer
from tensorflow.python.keras.saving.saved_model import layer_serialization as layer_serialization
from tensorflow.python.keras.utils import tf_utils as tf_utils
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any, Optional

class InputLayer(base_layer.Layer):
    built: bool = ...
    sparse: Any = ...
    ragged: Any = ...
    batch_size: Any = ...
    supports_masking: bool = ...
    is_placeholder: bool = ...
    def __init__(self, input_shape: Optional[Any] = ..., batch_size: Optional[Any] = ..., dtype: Optional[Any] = ..., input_tensor: Optional[Any] = ..., sparse: bool = ..., name: Optional[Any] = ..., ragged: bool = ..., **kwargs: Any) -> None: ...
    def get_config(self): ...

def Input(shape: Optional[Any] = ..., batch_size: Optional[Any] = ..., name: Optional[Any] = ..., dtype: Optional[Any] = ..., sparse: bool = ..., tensor: Optional[Any] = ..., ragged: bool = ..., **kwargs: Any): ...
