from tensorflow.python.keras.utils import losses_utils as losses_utils
from tensorflow.python.ops import array_ops as array_ops, math_ops as math_ops
from tensorflow.python.util import nest as nest
from typing import Any, Optional

class Container:
    def __init__(self, output_names: Optional[Any] = ...) -> None: ...

class LossesContainer(Container):
    def __init__(self, losses: Any, loss_weights: Optional[Any] = ..., output_names: Optional[Any] = ...) -> None: ...
    @property
    def metrics(self): ...
    def __call__(self, y_true: Any, y_pred: Any, sample_weight: Optional[Any] = ..., regularization_losses: Optional[Any] = ...): ...

class MetricsContainer(Container):
    def __init__(self, metrics: Optional[Any] = ..., weighted_metrics: Optional[Any] = ..., output_names: Optional[Any] = ...) -> None: ...
    @property
    def metrics(self): ...
    def update_state(self, y_true: Any, y_pred: Any, sample_weight: Optional[Any] = ...) -> None: ...

def create_pseudo_output_names(outputs: Any): ...
def create_pseudo_input_names(inputs: Any): ...
def map_to_output_names(y_pred: Any, output_names: Any, struct: Any): ...
def map_missing_dict_keys(y_pred: Any, struct: Any): ...
def match_dtype_and_rank(y_t: Any, y_p: Any, sw: Any): ...
def apply_mask(y_p: Any, sw: Any): ...
