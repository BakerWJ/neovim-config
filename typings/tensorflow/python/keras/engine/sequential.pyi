from tensorflow.python.keras.engine import base_layer as base_layer, input_layer as input_layer, training as training, training_utils as training_utils
from tensorflow.python.keras.saving.saved_model import model_serialization as model_serialization
from tensorflow.python.keras.utils import generic_utils as generic_utils, layer_utils as layer_utils, tf_utils as tf_utils
from tensorflow.python.util import nest as nest, tf_inspect as tf_inspect
from tensorflow.python.util.deprecation import deprecated as deprecated
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any, Optional

SINGLE_LAYER_OUTPUT_ERROR_MSG: str

class Sequential(training.Model):
    supports_masking: bool = ...
    def __init__(self, layers: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    @property
    def layers(self): ...
    @property
    def dynamic(self): ...
    built: bool = ...
    outputs: Any = ...
    inputs: Any = ...
    def add(self, layer: Any) -> None: ...
    def pop(self) -> None: ...
    def build(self, input_shape: Optional[Any] = ...) -> None: ...
    def call(self, inputs: Any, training: Optional[Any] = ..., mask: Optional[Any] = ...): ...
    def compute_output_shape(self, input_shape: Any): ...
    def compute_mask(self, inputs: Any, mask: Any): ...
    def predict_proba(self, x: Any, batch_size: int = ..., verbose: int = ...): ...
    def predict_classes(self, x: Any, batch_size: int = ..., verbose: int = ...): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ...): ...
    @property
    def input_spec(self): ...
