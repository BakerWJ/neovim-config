import abc
from tensorflow.python.data.ops import dataset_ops as dataset_ops
from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, errors as errors, ops as ops, sparse_tensor as sparse_tensor
from tensorflow.python.keras.engine import training_generator as training_generator
from tensorflow.python.keras.engine.base_layer import Layer as Layer
from tensorflow.python.keras.utils import tf_utils as tf_utils
from tensorflow.python.ops import sparse_ops as sparse_ops
from tensorflow.python.ops.ragged import ragged_tensor as ragged_tensor
from tensorflow.python.util.tf_export import keras_export as keras_export
from typing import Any, Optional

class PreprocessingLayer(Layer, metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    @abc.abstractmethod
    def adapt(self, data: Any, reset_state: bool = ...) -> Any: ...

class CombinerPreprocessingLayer(PreprocessingLayer):
    state_variables: Any = ...
    def __init__(self, combiner: Any, **kwargs: Any) -> None: ...
    def adapt(self, data: Any, reset_state: bool = ...): ...

def convert_to_list(values: Any, sparse_default_value: Optional[Any] = ...): ...

class Combiner(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    @abc.abstractmethod
    def compute(self, batch_values: Any, accumulator: Optional[Any] = ...) -> Any: ...
    @abc.abstractmethod
    def merge(self, accumulators: Any) -> Any: ...
    @abc.abstractmethod
    def extract(self, accumulator: Any) -> Any: ...
    @abc.abstractmethod
    def restore(self, output: Any) -> Any: ...
    @abc.abstractmethod
    def serialize(self, accumulator: Any) -> Any: ...
    @abc.abstractmethod
    def deserialize(self, encoded_accumulator: Any) -> Any: ...
