from tensorflow.python.autograph.core import ag_ctx as ag_ctx
from tensorflow.python.eager import context as context
from tensorflow.python.framework import dtypes as dtypes, errors as errors, func_graph as func_graph, ops as ops, sparse_tensor as sparse_tensor, tensor_spec as tensor_spec, tensor_util as tensor_util
from tensorflow.python.keras import backend as backend, constraints as constraints, initializers as initializers, regularizers as regularizers
from tensorflow.python.keras.engine import base_layer as base_layer, base_layer_utils as base_layer_utils, input_spec as input_spec
from tensorflow.python.keras.mixed_precision.experimental import autocast_variable as autocast_variable, loss_scale_optimizer as loss_scale_optimizer, policy as policy
from tensorflow.python.keras.saving.saved_model import layer_serialization as layer_serialization
from tensorflow.python.keras.utils import generic_utils as generic_utils, layer_utils as layer_utils, tf_utils as tf_utils
from tensorflow.python.keras.utils.generic_utils import to_snake_case as to_snake_case
from tensorflow.python.keras.utils.tf_utils import is_tensor_or_tensor_list as is_tensor_or_tensor_list
from tensorflow.python.module import module as module
from tensorflow.python.ops import array_ops as array_ops, math_ops as math_ops, resource_variable_ops as resource_variable_ops
from tensorflow.python.ops.ragged import ragged_tensor as ragged_tensor
from tensorflow.python.platform import tf_logging as tf_logging
from tensorflow.python.training.tracking import data_structures as data_structures, tracking as tracking
from tensorflow.python.util import deprecation as deprecation, nest as nest, object_identity as object_identity, tf_inspect as tf_inspect
from tensorflow.tools.docs import doc_controls as doc_controls
from typing import Any, Optional

class Layer(base_layer.Layer):
    built: bool = ...
    supports_masking: bool = ...
    def __init__(self, trainable: bool = ..., name: Optional[Any] = ..., dtype: Optional[Any] = ..., dynamic: bool = ..., **kwargs: Any) -> None: ...
    def build(self, input_shape: Any) -> None: ...
    def call(self, inputs: Any, **kwargs: Any): ...
    def add_weight(self, name: Optional[Any] = ..., shape: Optional[Any] = ..., dtype: Optional[Any] = ..., initializer: Optional[Any] = ..., regularizer: Optional[Any] = ..., trainable: Optional[Any] = ..., constraint: Optional[Any] = ..., partitioner: Optional[Any] = ..., use_resource: Optional[Any] = ..., synchronization: Any = ..., aggregation: Any = ..., **kwargs: Any): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any): ...
    def compute_output_shape(self, input_shape: Any): ...
    def compute_output_signature(self, input_signature: Any): ...
    def compute_mask(self, inputs: Any, mask: Optional[Any] = ...): ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    @property
    def dtype(self): ...
    @property
    def name(self): ...
    @property
    def dynamic(self): ...
    @property
    def stateful(self): ...
    @stateful.setter
    def stateful(self, value: Any) -> None: ...
    @property
    def trainable(self): ...
    @trainable.setter
    def trainable(self, value: Any) -> None: ...
    @property
    def activity_regularizer(self): ...
    @activity_regularizer.setter
    def activity_regularizer(self, regularizer: Any) -> None: ...
    @property
    def input_spec(self): ...
    @input_spec.setter
    def input_spec(self, value: Any) -> None: ...
    @property
    def trainable_weights(self): ...
    @property
    def non_trainable_weights(self): ...
    @property
    def weights(self): ...
    @property
    def updates(self): ...
    @property
    def losses(self): ...
    def add_loss(self, losses: Any, inputs: Optional[Any] = ...): ...
    @property
    def metrics(self): ...
    def add_metric(self, value: Any, aggregation: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    def add_update(self, updates: Any, inputs: Optional[Any] = ...): ...
    def set_weights(self, weights: Any) -> None: ...
    def get_weights(self): ...
    def get_updates_for(self, inputs: Any): ...
    def get_losses_for(self, inputs: Any): ...
    def get_input_mask_at(self, node_index: Any): ...
    def get_output_mask_at(self, node_index: Any): ...
    @property
    def input_mask(self): ...
    @property
    def output_mask(self): ...
    def get_input_shape_at(self, node_index: Any): ...
    def get_output_shape_at(self, node_index: Any): ...
    def get_input_at(self, node_index: Any): ...
    def get_output_at(self, node_index: Any): ...
    @property
    def input(self): ...
    @property
    def output(self): ...
    @property
    def input_shape(self): ...
    def count_params(self): ...
    @property
    def output_shape(self): ...
    @property
    def inbound_nodes(self): ...
    @property
    def outbound_nodes(self): ...
    def apply(self, inputs: Any, *args: Any, **kwargs: Any): ...
    def add_variable(self, *args: Any, **kwargs: Any): ...
    @property
    def variables(self): ...
    @property
    def trainable_variables(self): ...
    @property
    def non_trainable_variables(self): ...
    def __delattr__(self, name: Any) -> None: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...

class KerasHistory: ...
InputSpec = input_spec.InputSpec
