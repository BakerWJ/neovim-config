from tensorflow.python.keras import optimizers as optimizers
from tensorflow.python.keras.saving import saving_utils as saving_utils
from tensorflow.python.keras.utils import conv_utils as conv_utils
from tensorflow.python.keras.utils.io_utils import ask_to_proceed_with_overwrite as ask_to_proceed_with_overwrite
from tensorflow.python.util import serialization as serialization
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from typing import Any, Optional

HDF5_OBJECT_HEADER_LIMIT: int
sequential_lib: Any

def save_model_to_hdf5(model: Any, filepath: Any, overwrite: bool = ..., include_optimizer: bool = ...) -> None: ...
def load_model_from_hdf5(filepath: Any, custom_objects: Optional[Any] = ..., compile: bool = ...): ...
def preprocess_weights_for_loading(layer: Any, weights: Any, original_keras_version: Optional[Any] = ..., original_backend: Optional[Any] = ...): ...
def save_optimizer_weights_to_hdf5_group(hdf5_group: Any, optimizer: Any) -> None: ...
def load_optimizer_weights_from_hdf5_group(hdf5_group: Any): ...
def save_weights_to_hdf5_group(f: Any, layers: Any): ...
def load_weights_from_hdf5_group(f: Any, layers: Any) -> None: ...
def load_weights_from_hdf5_group_by_name(f: Any, layers: Any, skip_mismatch: bool = ...) -> None: ...
def save_attributes_to_hdf5_group(group: Any, name: Any, data: Any) -> None: ...
def load_attributes_from_hdf5_group(group: Any, name: Any): ...
