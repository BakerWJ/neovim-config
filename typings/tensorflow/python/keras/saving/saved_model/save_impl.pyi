from tensorflow.python.eager import def_function as def_function, function as function
from tensorflow.python.framework import tensor_shape as tensor_shape, tensor_spec as tensor_spec
from tensorflow.python.keras.engine import base_layer_utils as base_layer_utils, input_spec as input_spec
from tensorflow.python.keras.saving import saving_utils as saving_utils
from tensorflow.python.keras.saving.saved_model import constants as constants, serialized_attributes as serialized_attributes, utils as utils
from tensorflow.python.training.tracking import data_structures as data_structures
from tensorflow.python.util import nest as nest, tf_decorator as tf_decorator, tf_inspect as tf_inspect
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from typing import Any

base_layer: Any
metrics: Any
input_layer: Any
training_lib: Any
sequential_lib: Any

def should_skip_serialization(layer: Any): ...
def wrap_layer_objects(layer: Any, serialization_cache: Any): ...
def wrap_layer_functions(layer: Any, serialization_cache: Any): ...
def default_save_signature(layer: Any): ...

class LayerCallCollection:
    layer: Any = ...
    layer_call_method: Any = ...
    tracing: bool = ...
    def __init__(self, layer: Any) -> None: ...
    def add_trace(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def fn_input_signature(self): ...
    def training_arg_was_passed(self, args: Any, kwargs: Any): ...
    def get_training_arg_value(self, args: Any, kwargs: Any): ...
    def get_input_arg_value(self, args: Any, kwargs: Any): ...
    def add_function(self, call_fn: Any, name: Any): ...

def layer_call_wrapper(call_collection: Any, method: Any): ...

class LayerCall(def_function.Function):
    call_collection: Any = ...
    original_call: Any = ...
    def __init__(self, call_collection: Any, python_function: Any, *args: Any, **kwargs: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def get_concrete_function(self, *args: Any, **kwargs: Any): ...
