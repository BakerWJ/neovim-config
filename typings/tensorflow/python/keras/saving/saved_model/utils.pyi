from tensorflow.python.eager import context as context
from tensorflow.python.keras.engine import base_layer_utils as base_layer_utils
from tensorflow.python.keras.utils import tf_utils as tf_utils
from tensorflow.python.util import tf_decorator as tf_decorator, tf_inspect as tf_inspect
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from typing import Any, Optional

training_lib: Any

def use_wrapped_call(layer: Any, call_fn: Any, default_training_value: Optional[Any] = ..., return_method: bool = ...): ...
def layer_uses_training_bool(layer: Any): ...
def list_all_layers(obj: Any): ...
def list_all_layers_and_sublayers(obj: Any): ...
def maybe_add_training_arg(original_call: Any, wrapped_call: Any, expects_training_arg: Any, default_training_value: Any): ...
def get_training_arg_index(call_fn: Any): ...
def set_training_arg(training: Any, index: Any, args: Any, kwargs: Any): ...
def get_training_arg(index: Any, args: Any, kwargs: Any): ...
def remove_training_arg(index: Any, args: Any, kwargs: Any) -> None: ...
