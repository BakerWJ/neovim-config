from tensorflow.python.tools.api.generator import doc_srcs as doc_srcs
from tensorflow.python.util import tf_decorator as tf_decorator, tf_export as tf_export
from typing import Any, Optional

API_ATTRS: Any
API_ATTRS_V1: Any

class SymbolExposedTwiceError(Exception): ...

def get_canonical_import(import_set: Any): ...

class _ModuleInitCodeBuilder:
    def __init__(self, output_package: Any, api_version: Any, lazy_loading: Any = ..., use_relative_imports: bool = ...): ...
    def add_import(self, symbol: Any, source_module_name: Any, source_name: Any, dest_module_name: Any, dest_name: Any) -> None: ...
    def build(self): ...
    def format_import(self, source_module_name: Any, source_name: Any, dest_name: Any): ...
    def get_destination_modules(self): ...
    def copy_imports(self, from_dest_module: Any, to_dest_module: Any) -> None: ...

def add_nested_compat_imports(module_builder: Any, compat_api_versions: Any, output_package: Any) -> None: ...
def add_imports_for_symbol(module_code_builder: Any, symbol: Any, source_module_name: Any, source_name: Any, api_name: Any, api_version: Any, output_module_prefix: str = ...) -> None: ...
def get_api_init_text(packages: Any, output_package: Any, api_name: Any, api_version: Any, compat_api_versions: Optional[Any] = ..., lazy_loading: Any = ..., use_relative_imports: bool = ...): ...
def get_module(dir_path: Any, relative_to_dir: Any): ...
def get_module_docstring(module_name: Any, package: Any, api_name: Any): ...
def create_api_files(output_files: Any, packages: Any, root_init_template: Any, output_dir: Any, output_package: Any, api_name: Any, api_version: Any, compat_api_versions: Any, compat_init_templates: Any, lazy_loading: Any = ..., use_relative_imports: bool = ...) -> None: ...
def main() -> None: ...
