from tensorflow.core.framework import tensor_pb2 as tensor_pb2
from tensorflow.core.protobuf import debug_event_pb2 as debug_event_pb2, graph_debug_info_pb2 as graph_debug_info_pb2
from tensorflow.python.debug.lib import debug_events_writer as debug_events_writer, op_callbacks_common as op_callbacks_common, source_utils as source_utils
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes, op_callbacks as op_callbacks, ops as ops, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, gen_debug_ops as gen_debug_ops
from tensorflow.python.util import compat as compat, tf_stack as tf_stack
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

DEFAULT_TENSOR_DEBUG_MODE: str

def is_op_type_function(op_type: Any): ...

class _DumpingCallback:
    def __init__(self, dump_root: Any, tensor_debug_mode: Any, circular_buffer_size: Any, op_regex: Any, tensor_dtypes: Any) -> None: ...
    def function_callback(self, function: Any) -> None: ...
    @property
    def dump_root(self): ...
    @dump_root.setter
    def dump_root(self, dump_root: Any) -> None: ...
    @property
    def tensor_debug_mode(self): ...
    @property
    def circular_buffer_size(self): ...
    def get_writer(self): ...
    def callback(self, op_type: Any, inputs: Any, attrs: Any, outputs: Any, op_name: Optional[Any] = ..., graph: Optional[Any] = ...): ...

def enable_dump_debug_info(dump_root: Any, tensor_debug_mode: Any = ..., circular_buffer_size: int = ..., op_regex: Optional[Any] = ..., tensor_dtypes: Optional[Any] = ...): ...
def disable_dump_debug_info() -> None: ...
