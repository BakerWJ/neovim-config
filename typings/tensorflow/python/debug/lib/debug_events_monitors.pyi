from tensorflow.core.protobuf import debug_event_pb2 as debug_event_pb2
from typing import Any, Optional

class BaseMonitor:
    def __init__(self, debug_events_reader: Any) -> None: ...
    def on_execution(self, execution_index: Any, execution: Any) -> None: ...
    def on_graph_execution_trace(self, graph_execution_trace_index: Any, graph_execution_trace: Any) -> None: ...

class InfNanAlert:
    def __init__(self, wall_time: Any, op_type: Any, output_slot: Any, size: Optional[Any] = ..., num_neg_inf: Optional[Any] = ..., num_pos_inf: Optional[Any] = ..., num_nan: Optional[Any] = ..., execution_index: Optional[Any] = ..., graph_execution_trace_index: Optional[Any] = ...) -> None: ...
    @property
    def wall_time(self): ...
    @property
    def op_type(self): ...
    @property
    def output_slot(self): ...
    @property
    def size(self): ...
    @property
    def num_neg_inf(self): ...
    @property
    def num_pos_inf(self): ...
    @property
    def num_nan(self): ...
    @property
    def execution_index(self): ...
    @property
    def graph_execution_trace_index(self): ...

class InfNanMonitor(BaseMonitor):
    def __init__(self, debug_events_reader: Any, limit: int = ...) -> None: ...
    def on_execution(self, execution_index: Any, execution: Any) -> None: ...
    def on_graph_execution_trace(self, graph_execution_trace_index: Any, graph_execution_trace: Any) -> None: ...
    def alerts(self): ...
