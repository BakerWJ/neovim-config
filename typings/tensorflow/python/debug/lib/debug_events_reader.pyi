from collections import namedtuple
from tensorflow.core.protobuf import debug_event_pb2 as debug_event_pb2
from tensorflow.python.framework import errors as errors, tensor_util as tensor_util
from tensorflow.python.lib.io import file_io as file_io, tf_record as tf_record
from tensorflow.python.util import compat as compat
from typing import Any, Optional

DebugEventWithOffset = namedtuple('DebugEventWithOffset', 'debug_event offset')

class DebugEventsReader:
    def __init__(self, dump_root: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exception_type: Any, exception_value: Any, traceback: Any) -> None: ...
    def metadata_iterator(self): ...
    def source_files_iterator(self): ...
    def stack_frames_iterator(self): ...
    def graphs_iterator(self): ...
    def read_source_files_event(self, offset: Any): ...
    def read_graphs_event(self, offset: Any): ...
    def execution_iterator(self): ...
    def read_execution_debug_event(self, offset: Any): ...
    def graph_execution_traces_iterator(self): ...
    def read_graph_execution_traces_event(self, offset: Any): ...
    def close(self) -> None: ...

class BaseDigest:
    def __init__(self, wall_time: Any, offset: Any) -> None: ...
    @property
    def wall_time(self): ...
    @property
    def offset(self): ...
    def to_json(self): ...

class ExecutionDigest(BaseDigest):
    def __init__(self, wall_time: Any, offset: Any, op_type: Any, output_tensor_device_ids: Optional[Any] = ...) -> None: ...
    @property
    def op_type(self): ...
    @property
    def output_tensor_device_ids(self): ...
    def to_json(self): ...

class Execution(ExecutionDigest):
    def __init__(self, execution_digest: Any, host_name: Any, stack_frame_ids: Any, tensor_debug_mode: Any, graph_id: Optional[Any] = ..., input_tensor_ids: Optional[Any] = ..., output_tensor_ids: Optional[Any] = ..., debug_tensor_values: Optional[Any] = ...) -> None: ...
    @property
    def host_name(self): ...
    @property
    def stack_frame_ids(self): ...
    @property
    def tensor_debug_mode(self): ...
    @property
    def graph_id(self): ...
    @property
    def input_tensor_ids(self): ...
    @property
    def num_outputs(self): ...
    @property
    def output_tensor_ids(self): ...
    @property
    def debug_tensor_values(self): ...
    def to_json(self): ...

class DebuggedGraph:
    def __init__(self, name: Any, graph_id: Any, outer_graph_id: Optional[Any] = ...) -> None: ...
    def add_inner_graph_id(self, inner_graph_id: Any) -> None: ...
    def add_op(self, graph_op_creation_digest: Any) -> None: ...
    @property
    def name(self): ...
    @property
    def graph_id(self): ...
    @property
    def outer_graph_id(self): ...
    @property
    def inner_graph_ids(self): ...
    def get_op_type(self, op_name: Any): ...
    def get_tensor_id(self, op_name: Any, output_slot: Any): ...

class DebuggedDevice:
    def __init__(self, device_name: Any, device_id: Any) -> None: ...
    @property
    def device_name(self): ...
    @property
    def device_id(self): ...

class GraphOpCreationDigest(BaseDigest):
    def __init__(self, wall_time: Any, offset: Any, graph_id: Any, op_type: Any, op_name: Any, output_tensor_ids: Any, input_names: Optional[Any] = ..., device_name: Optional[Any] = ...) -> None: ...
    @property
    def graph_id(self): ...
    @property
    def op_type(self): ...
    @property
    def op_name(self): ...
    @property
    def output_tensor_ids(self): ...
    @property
    def num_outputs(self): ...
    @property
    def input_names(self): ...
    @property
    def device_name(self): ...
    def to_json(self): ...

class GraphExecutionTraceDigest(BaseDigest):
    def __init__(self, wall_time: Any, offset: Any, op_type: Any, op_name: Any, output_slot: Any, graph_id: Any) -> None: ...
    @property
    def op_type(self): ...
    @property
    def op_name(self): ...
    @property
    def output_slot(self): ...
    @property
    def graph_id(self): ...
    def to_json(self): ...

class GraphExecutionTrace(GraphExecutionTraceDigest):
    def __init__(self, graph_execution_trace_digest: Any, graph_ids: Any, tensor_debug_mode: Any, debug_tensor_value: Optional[Any] = ..., device_name: Optional[Any] = ...) -> None: ...
    @property
    def graph_ids(self): ...
    @property
    def graph_id(self): ...
    @property
    def tensor_debug_mode(self): ...
    @property
    def debug_tensor_value(self): ...
    @property
    def device_name(self): ...
    def to_json(self): ...

class DebugDataReader:
    def __init__(self, dump_root: Any) -> None: ...
    def update(self) -> None: ...
    def source_file_list(self): ...
    def source_lines(self, host_name: Any, file_path: Any): ...
    def starting_wall_time(self): ...
    def tensorflow_version(self): ...
    def outermost_graphs(self): ...
    def graph_by_id(self, graph_id: Any): ...
    def device_name_by_id(self, device_id: Any): ...
    def device_name_map(self): ...
    def graph_op_digests(self, op_type: Optional[Any] = ...): ...
    def graph_execution_traces(self, digest: bool = ...): ...
    def num_graph_execution_traces(self): ...
    def executions(self, digest: bool = ...): ...
    def num_executions(self): ...
    def read_execution(self, execution_digest: Any): ...
    def read_graph_execution_trace(self, graph_execution_trace_digest: Any): ...
    def read_execution_stack_trace(self, execution: Any): ...
    def read_graph_op_creation_stack_trace(self, graph_op_creation_digest: Any): ...
    def execution_to_tensor_values(self, execution: Any): ...
    def graph_execution_trace_to_tensor_value(self, trace: Any): ...
    def symbolic_tensor_id(self, graph_id: Any, op_name: Any, output_slot: Any): ...
    def graph_execution_trace_to_tensor_id(self, trace: Any): ...
    def __enter__(self): ...
    def __exit__(self, exception_type: Any, exception_value: Any, traceback: Any) -> None: ...
