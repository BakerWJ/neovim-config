import abc
from collections import namedtuple
from tensorflow.python.eager import context as context
from tensorflow.python.feature_column import feature_column as fc_old
from tensorflow.python.framework import dtypes as dtypes, ops as ops, tensor_shape as tensor_shape
from tensorflow.python.keras import initializers as initializers
from tensorflow.python.keras.engine import training as training
from tensorflow.python.keras.engine.base_layer import Layer as Layer
from tensorflow.python.keras.utils import generic_utils as generic_utils
from tensorflow.python.ops import array_ops as array_ops, check_ops as check_ops, control_flow_ops as control_flow_ops, embedding_ops as embedding_ops, init_ops as init_ops, lookup_ops as lookup_ops, math_ops as math_ops, nn_ops as nn_ops, parsing_ops as parsing_ops, sparse_ops as sparse_ops, string_ops as string_ops, variable_scope as variable_scope, variables as variables
from tensorflow.python.platform import gfile as gfile
from tensorflow.python.training import checkpoint_utils as checkpoint_utils
from tensorflow.python.training.tracking import tracking as tracking
from tensorflow.python.util import deprecation as deprecation, nest as nest
from tensorflow.python.util.compat import collections_abc as collections_abc
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

class StateManager:
    def create_variable(self, feature_column: Any, name: Any, shape: Any, dtype: Optional[Any] = ..., trainable: bool = ..., use_resource: bool = ..., initializer: Optional[Any] = ...) -> None: ...
    def add_variable(self, feature_column: Any, var: Any) -> None: ...
    def get_variable(self, feature_column: Any, name: Any) -> None: ...
    def add_resource(self, feature_column: Any, name: Any, resource: Any) -> None: ...
    def get_resource(self, feature_column: Any, name: Any) -> None: ...

class _StateManagerImpl(StateManager):
    def __init__(self, layer: Any, trainable: Any): ...
    def create_variable(self, feature_column: Any, name: Any, shape: Any, dtype: Optional[Any] = ..., trainable: bool = ..., use_resource: bool = ..., initializer: Optional[Any] = ...): ...
    def get_variable(self, feature_column: Any, name: Any): ...
    def add_resource(self, feature_column: Any, name: Any, resource: Any) -> None: ...
    def get_resource(self, feature_column: Any, name: Any): ...

class _StateManagerImplV2(_StateManagerImpl):
    def create_variable(self, feature_column: Any, name: Any, shape: Any, dtype: Optional[Any] = ..., trainable: bool = ..., use_resource: bool = ..., initializer: Optional[Any] = ...): ...

class _BaseFeaturesLayer(Layer):
    def __init__(self, feature_columns: Any, expected_column_type: Any, trainable: Any, name: Any, partitioner: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def build(self, _: Any) -> None: ...
    def compute_output_shape(self, input_shape: Any): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ...): ...

class _LinearModelLayer(Layer):
    bias: Any = ...
    def __init__(self, feature_columns: Any, units: int = ..., sparse_combiner: str = ..., trainable: bool = ..., name: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def build(self, _: Any) -> None: ...
    def call(self, features: Any): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ...): ...

class LinearModel(training.Model):
    layer: Any = ...
    def __init__(self, feature_columns: Any, units: int = ..., sparse_combiner: str = ..., trainable: bool = ..., name: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def call(self, features: Any): ...
    @property
    def bias(self): ...

def make_parse_example_spec_v2(feature_columns: Any): ...
def embedding_column(categorical_column: Any, dimension: Any, combiner: str = ..., initializer: Optional[Any] = ..., ckpt_to_load_from: Optional[Any] = ..., tensor_name_in_ckpt: Optional[Any] = ..., max_norm: Optional[Any] = ..., trainable: bool = ..., use_safe_embedding_lookup: bool = ...): ...
def shared_embedding_columns(categorical_columns: Any, dimension: Any, combiner: str = ..., initializer: Optional[Any] = ..., shared_embedding_collection_name: Optional[Any] = ..., ckpt_to_load_from: Optional[Any] = ..., tensor_name_in_ckpt: Optional[Any] = ..., max_norm: Optional[Any] = ..., trainable: bool = ..., use_safe_embedding_lookup: bool = ...): ...
def shared_embedding_columns_v2(categorical_columns: Any, dimension: Any, combiner: str = ..., initializer: Optional[Any] = ..., shared_embedding_collection_name: Optional[Any] = ..., ckpt_to_load_from: Optional[Any] = ..., tensor_name_in_ckpt: Optional[Any] = ..., max_norm: Optional[Any] = ..., trainable: bool = ..., use_safe_embedding_lookup: bool = ...): ...
def numeric_column(key: Any, shape: Any = ..., default_value: Optional[Any] = ..., dtype: Any = ..., normalizer_fn: Optional[Any] = ...): ...
def bucketized_column(source_column: Any, boundaries: Any): ...
def categorical_column_with_hash_bucket(key: Any, hash_bucket_size: Any, dtype: Any = ...): ...
def categorical_column_with_vocabulary_file(key: Any, vocabulary_file: Any, vocabulary_size: Optional[Any] = ..., num_oov_buckets: int = ..., default_value: Optional[Any] = ..., dtype: Any = ...): ...
def categorical_column_with_vocabulary_file_v2(key: Any, vocabulary_file: Any, vocabulary_size: Optional[Any] = ..., dtype: Any = ..., default_value: Optional[Any] = ..., num_oov_buckets: int = ...): ...
def categorical_column_with_vocabulary_list(key: Any, vocabulary_list: Any, dtype: Optional[Any] = ..., default_value: int = ..., num_oov_buckets: int = ...): ...
def categorical_column_with_identity(key: Any, num_buckets: Any, default_value: Optional[Any] = ...): ...
def indicator_column(categorical_column: Any): ...
def weighted_categorical_column(categorical_column: Any, weight_feature_key: Any, dtype: Any = ...): ...
def crossed_column(keys: Any, hash_bucket_size: Any, hash_key: Optional[Any] = ...): ...

class FeatureColumn(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def name(self) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    @abc.abstractmethod
    def transform_feature(self, transformation_cache: Any, state_manager: Any) -> Any: ...
    @property
    @abc.abstractmethod
    def parse_example_spec(self) -> Any: ...
    def create_state(self, state_manager: Any) -> None: ...
    @property
    @abc.abstractmethod
    def parents(self) -> Any: ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class DenseColumn(FeatureColumn, metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def variable_shape(self) -> Any: ...
    @abc.abstractmethod
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any) -> Any: ...

def is_feature_column_v2(feature_columns: Any): ...

class CategoricalColumn(FeatureColumn, metaclass=abc.ABCMeta):

    IdWeightPair = namedtuple('IdWeightPair', ['id_tensor', 'weight_tensor'])
    @property
    @abc.abstractmethod
    def num_buckets(self) -> Any: ...
    @abc.abstractmethod
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any) -> Any: ...

class SequenceDenseColumn(FeatureColumn, metaclass=abc.ABCMeta):

    TensorSequenceLengthPair = namedtuple('TensorSequenceLengthPair', ['dense_tensor', 'sequence_length'])
    @abc.abstractmethod
    def get_sequence_dense_tensor(self, transformation_cache: Any, state_manager: Any) -> Any: ...

class FeatureTransformationCache:
    def __init__(self, features: Any) -> None: ...
    def get(self, key: Any, state_manager: Any): ...

class NumericColumn(DenseColumn, fc_old._DenseColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def variable_shape(self): ...
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class BucketizedColumn(DenseColumn, CategoricalColumn, fc_old._DenseColumn, fc_old._CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def variable_shape(self): ...
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class EmbeddingColumn(DenseColumn, SequenceDenseColumn, fc_old._DenseColumn, fc_old._SequenceDenseColumn):
    def __new__(cls, categorical_column: Any, dimension: Any, combiner: Any, initializer: Any, ckpt_to_load_from: Any, tensor_name_in_ckpt: Any, max_norm: Any, trainable: Any, use_safe_embedding_lookup: bool = ...): ...
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def variable_shape(self): ...
    def create_state(self, state_manager: Any) -> None: ...
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    def get_sequence_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class SharedEmbeddingColumnCreator(tracking.AutoTrackable):
    def __init__(self, dimension: Any, initializer: Any, ckpt_to_load_from: Any, tensor_name_in_ckpt: Any, num_buckets: Any, trainable: Any, name: str = ..., use_safe_embedding_lookup: bool = ...) -> None: ...
    def __call__(self, categorical_column: Any, combiner: Any, max_norm: Any): ...
    @property
    def embedding_weights(self): ...
    @property
    def dimension(self): ...

class SharedEmbeddingColumn(DenseColumn, SequenceDenseColumn, fc_old._DenseColumn, fc_old._SequenceDenseColumn):
    def __new__(cls, categorical_column: Any, shared_embedding_column_creator: Any, combiner: Any, max_norm: Any, use_safe_embedding_lookup: bool = ...): ...
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def variable_shape(self): ...
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    def get_sequence_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...

class HashedCategoricalColumn(CategoricalColumn, fc_old._CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class VocabularyFileCategoricalColumn(CategoricalColumn, fc_old._CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class VocabularyListCategoricalColumn(CategoricalColumn, fc_old._CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class IdentityCategoricalColumn(CategoricalColumn, fc_old._CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class WeightedCategoricalColumn(CategoricalColumn, fc_old._CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    @property
    def num_buckets(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class CrossedColumn(CategoricalColumn, fc_old._CategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class IndicatorColumn(DenseColumn, SequenceDenseColumn, fc_old._DenseColumn, fc_old._SequenceDenseColumn):
    @property
    def name(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parse_example_spec(self): ...
    @property
    def variable_shape(self): ...
    def get_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    def get_sequence_dense_tensor(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...

class SequenceCategoricalColumn(CategoricalColumn, fc_old._SequenceCategoricalColumn):
    @property
    def name(self): ...
    @property
    def parse_example_spec(self): ...
    def transform_feature(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def num_buckets(self): ...
    def get_sparse_tensors(self, transformation_cache: Any, state_manager: Any): ...
    @property
    def parents(self): ...
    def get_config(self): ...
    @classmethod
    def from_config(cls, config: Any, custom_objects: Optional[Any] = ..., columns_by_name: Optional[Any] = ...): ...
