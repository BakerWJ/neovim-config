from tensorflow.python import keras as keras
from tensorflow.python.distribute.model_collection import model_collection_base as model_collection_base
from tensorflow.python.eager import def_function as def_function
from tensorflow.python.framework import constant_op as constant_op, dtypes as dtypes
from tensorflow.python.keras.optimizer_v2 import gradient_descent as gradient_descent
from tensorflow.python.module import module as module
from tensorflow.python.ops import variables as variables
from typing import Any

class SimpleFunctionalModel(model_collection_base.ModelAndInput):
    def get_model(self, **kwargs: Any): ...
    def get_data(self): ...
    def get_batch_size(self): ...

class SimpleSequentialModel(model_collection_base.ModelAndInput):
    def get_model(self, **kwargs: Any): ...
    def get_data(self): ...
    def get_batch_size(self): ...

class _SimpleModel(keras.Model):
    def __init__(self) -> None: ...
    def call(self, inputs: Any): ...

class SimpleSubclassModel(model_collection_base.ModelAndInput):
    def get_model(self, **kwargs: Any): ...
    def get_data(self): ...
    def get_batch_size(self): ...

class _SimpleModule(module.Module):
    v: Any = ...
    def __init__(self) -> None: ...
    def __call__(self, x: Any): ...

class SimpleTFModuleModel(model_collection_base.ModelAndInput):
    def get_model(self, **kwargs: Any): ...
    def get_data(self): ...
    def get_batch_size(self): ...
