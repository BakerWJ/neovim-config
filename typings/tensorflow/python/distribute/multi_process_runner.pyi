from collections import namedtuple
from tensorflow.python import tf2 as tf2
from tensorflow.python.compat import v2_compat as v2_compat
from tensorflow.python.distribute import multi_process_lib as multi_process_lib
from tensorflow.python.eager import context as context
from tensorflow.python.platform import test as test
from tensorflow.python.util import nest as nest
from typing import Any, Optional

_ProcessStatusInfo = namedtuple('_ProcessStatusInfo', ['task_type', 'is_successful', 'exc_info'])
PROCESS_STATUS_QUEUE: str
RETURN_VALUE_QUEUE: str
STD_STREAM_QUEUE: str
INTER_PROCESS_QUEUE: str
PARENT_TO_SUB_QUEUE: str

class _LogCollector:
    log: Any = ...
    original_stream: Any = ...
    def __init__(self, original_stream: Any) -> None: ...
    def write(self, data: Any) -> None: ...
    def flush(self, *args: Any, **kwargs: Any) -> None: ...

class MultiProcessRunner:
    def __init__(self, proc_func: Any, cluster_spec: Any, rpc_layer: Optional[Any] = ..., max_run_time: Optional[Any] = ..., capture_std_stream: bool = ..., grpc_fail_fast: bool = ..., args: Optional[Any] = ..., kwargs: Optional[Any] = ...) -> None: ...
    def start(self) -> None: ...
    def start_single_process(self, task_type: Any, task_id: Any, proc_func: Optional[Any] = ..., updated_cluster_spec: Optional[Any] = ..., args: Optional[Any] = ..., kwargs: Optional[Any] = ...) -> None: ...
    def join(self, timeout: Optional[Any] = ...): ...
    def terminate(self, task_type: Any, task_id: Any) -> None: ...

def run(proc_func: Any, cluster_spec: Any, rpc_layer: Optional[Any] = ..., max_run_time: Optional[Any] = ..., capture_std_stream: bool = ..., grpc_fail_fast: bool = ..., timeout: Optional[Any] = ..., args: Optional[Any] = ..., kwargs: Optional[Any] = ...): ...
def test_main() -> None: ...
