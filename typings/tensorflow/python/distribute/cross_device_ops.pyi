import enum
from collections import namedtuple
from tensorflow.python.client import device_lib as device_lib
from tensorflow.python.distribute import collective_util as collective_util, cross_device_utils as cross_device_utils, device_util as device_util, reduce_util as reduce_util, tpu_values as tpu_values
from tensorflow.python.eager import context as context, def_function as def_function
from tensorflow.python.framework import kernels as kernels, ops as ops, tensor_util as tensor_util
from tensorflow.python.ops import array_ops as array_ops, math_ops as math_ops, resource_variable_ops as resource_variable_ops
from tensorflow.python.util.tf_export import tf_export as tf_export
from tensorflow.tools.docs import doc_controls as doc_controls
from typing import Any, Optional

def check_destinations(destinations: Any): ...
def validate_destinations(destinations: Any) -> None: ...
def reduce_non_distributed_value(reduce_op: Any, value: Any, destinations: Any, num_replicas_in_graph: Any): ...
def get_devices_from(destinations: Any): ...
def simple_broadcast(value: Any, destinations: Any, always_mirrored: bool = ...): ...

class CrossDeviceOps:
    def __init__(self) -> None: ...
    def reduce(self, reduce_op: Any, per_replica_value: Any, destinations: Any, experimental_hints: Optional[Any] = ...): ...
    def batch_reduce(self, reduce_op: Any, value_destination_pairs: Any, experimental_hints: Optional[Any] = ...): ...
    def broadcast(self, tensor: Any, destinations: Any): ...
    def reduce_implementation(self, reduce_op: Any, per_replica_value: Any, destinations: Any, experimental_hints: Any) -> None: ...
    def batch_reduce_implementation(self, reduce_op: Any, value_destination_pairs: Any, experimental_hints: Any) -> None: ...
    def broadcast_implementation(self, tensor: Any, destinations: Any): ...

class ReductionToOneDevice(CrossDeviceOps):
    reduce_to_device: Any = ...
    accumulation_fn: Any = ...
    def __init__(self, reduce_to_device: Optional[Any] = ..., accumulation_fn: Optional[Any] = ...) -> None: ...
    def reduce_implementation(self, reduce_op: Any, per_replica_value: Any, destinations: Any, experimental_hints: Any): ...
    def batch_reduce_implementation(self, reduce_op: Any, value_destination_pairs: Any, experimental_hints: Any): ...

class _ConcatAndSplitPacker:
    num_packs: Any = ...
    def __init__(self, num_packs: int = ...) -> None: ...
    grouped_grads_and_vars: Any = ...
    all_device_shapes: Any = ...
    all_device_sizes: Any = ...
    def pack(self, grouped_grads_and_vars: Any): ...
    def unpack(self, summed_device_grad_packs: Any): ...

class AllReduceCrossDeviceOps(CrossDeviceOps):
    def __init__(self, all_reduce_alg: str = ..., num_packs: int = ...) -> None: ...
    def reduce_implementation(self, reduce_op: Any, per_replica_value: Any, destinations: Any, experimental_hints: Any): ...
    def batch_reduce_implementation(self, reduce_op: Any, value_destination_pairs: Any, experimental_hints: Any): ...
AllReduceCrossTowerOps = AllReduceCrossDeviceOps

AllReduceSpecTuple = namedtuple('AllReduceSpecTuple', 'alg shards limit')

class NcclAllReduce(AllReduceCrossDeviceOps):
    def __init__(self, num_packs: int = ...) -> None: ...

class HierarchicalCopyAllReduce(AllReduceCrossDeviceOps):
    def __init__(self, num_packs: int = ...) -> None: ...

class MultiWorkerAllReduce(AllReduceCrossDeviceOps):
    def __init__(self, worker_devices: Any, num_gpus_per_worker: Any, all_reduce_spec: Any = ..., num_packs: int = ...): ...

class CollectiveCommunication(enum.Enum):
    AUTO: str = ...
    RING: str = ...
    NCCL: str = ...

class CollectiveAllReduce(CrossDeviceOps):
    def __init__(self, num_workers: int = ..., num_gpus_per_worker: int = ..., collective_keys: Optional[Any] = ..., communication: Any = ...) -> None: ...
    def reduce_implementation(self, reduce_op: Any, per_replica_value: Any, destinations: Any, experimental_hints: Any): ...
    def batch_reduce_implementation(self, reduce_op: Any, value_destination_pairs: Any, experimental_hints: Any): ...

def choose_the_best(devices: Any, session_config: Optional[Any] = ...): ...
