from tensorflow.python.distribute import values as values
from tensorflow.python.eager import context as context, tape as tape
from tensorflow.python.framework import ops as ops
from tensorflow.python.ops import gen_resource_variable_ops as gen_resource_variable_ops, math_ops as math_ops
from tensorflow.python.tpu import tpu as tpu
from typing import Any

class TPUVariableMixin:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def get(self): ...
    def numpy(self): ...
    @property
    def handle(self): ...
    @property
    def device(self): ...
    def read_value(self): ...
    def value(self): ...
    @property
    def op(self): ...

def enclosing_tpu_context(): ...

class TPUMirroredVariable(TPUVariableMixin, values.MirroredVariable):
    def assign_sub(self, *args: Any, **kwargs: Any): ...
    def assign_add(self, *args: Any, **kwargs: Any): ...
    def assign(self, *args: Any, **kwargs: Any): ...
    def scatter_sub(self, *args: Any, **kwargs: Any) -> None: ...
    def scatter_add(self, *args: Any, **kwargs: Any) -> None: ...
    def scatter_max(self, *args: Any, **kwargs: Any) -> None: ...
    def scatter_min(self, *args: Any, **kwargs: Any) -> None: ...
    def scatter_mul(self, *args: Any, **kwargs: Any) -> None: ...
    def scatter_div(self, *args: Any, **kwargs: Any) -> None: ...
    def scatter_update(self, *args: Any, **kwargs: Any) -> None: ...

class TPUSyncOnReadVariable(TPUVariableMixin, values.SyncOnReadVariable):
    def assign_sub(self, *args: Any, **kwargs: Any): ...
    def assign_add(self, *args: Any, **kwargs: Any): ...
    def assign(self, *args: Any, **kwargs: Any): ...
