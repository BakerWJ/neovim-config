from tensorflow.python.distribute import device_util as device_util, distribute_lib as distribute_lib, input_lib as input_lib, mirrored_strategy as mirrored_strategy, multi_worker_util as multi_worker_util, numpy_dataset as numpy_dataset, values as values
from tensorflow.python.distribute.cluster_resolver import SimpleClusterResolver as SimpleClusterResolver, TFConfigClusterResolver as TFConfigClusterResolver
from tensorflow.python.eager import context as context
from tensorflow.python.framework import ops as ops
from tensorflow.python.ops import array_ops as array_ops, resource_variable_ops as resource_variable_ops
from tensorflow.python.training import device_setter as device_setter
from tensorflow.python.util import nest as nest
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

class ParameterServerStrategy(distribute_lib.Strategy):
    def __init__(self, cluster_resolver: Optional[Any] = ...) -> None: ...

class ParameterServerStrategyV1(distribute_lib.StrategyV1):
    __doc__: Any = ...
    def __init__(self, cluster_resolver: Optional[Any] = ...) -> None: ...

class ParameterServerStrategyExtended(distribute_lib.StrategyExtendedV1):
    def __init__(self, container_strategy: Any, cluster_resolver: Optional[Any] = ..., compute_devices: Optional[Any] = ..., parameter_device: Optional[Any] = ...) -> None: ...
    def value_container(self, val: Any): ...
    def read_var(self, var: Any): ...
    @property
    def worker_devices(self): ...
    @property
    def worker_devices_by_replica(self): ...
    @property
    def parameter_devices(self): ...
    def non_slot_devices(self, var_list: Any): ...
    @property
    def experimental_between_graph(self): ...
    @property
    def experimental_should_init(self): ...
    @property
    def should_checkpoint(self): ...
    @property
    def should_save_summary(self): ...
