from tensorflow.core.protobuf import meta_graph_pb2 as meta_graph_pb2, struct_pb2 as struct_pb2
from tensorflow.python.eager import context as context, function as function, lift_to_graph as lift_to_graph
from tensorflow.python.framework import composite_tensor as composite_tensor, func_graph as func_graph, importer as importer, ops as ops, sparse_tensor as sparse_tensor, tensor_shape as tensor_shape, tensor_util as tensor_util
from tensorflow.python.ops import resource_variable_ops as resource_variable_ops, variable_scope as variable_scope
from tensorflow.python.saved_model import nested_structure_coder as nested_structure_coder
from tensorflow.python.training.tracking import data_structures as data_structures
from tensorflow.python.util import nest as nest
from tensorflow.python.util.tf_export import tf_export as tf_export
from typing import Any, Optional

class VariableHolder:
    def __init__(self, fn: Optional[Any] = ..., share_variables: bool = ...) -> None: ...
    @property
    def variables(self): ...
    def variable_creator_scope(self, next_creator: Any, **kwargs: Any): ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def call_with_variable_creator_scope(self, fn: Any): ...

class WrappedFunction(function.ConcreteFunction):
    def __init__(self, fn_graph: Any, variable_holder: Any, attrs: Optional[Any] = ..., signature: Optional[Any] = ...) -> None: ...
    def prune(self, feeds: Any, fetches: Any, name: Optional[Any] = ..., input_signature: Optional[Any] = ...): ...

class WrappedGraph:
    graph: Any = ...
    def __init__(self, variable_holder: Optional[Any] = ..., **kwargs: Any) -> None: ...
    @property
    def functions(self): ...
    @property
    def variables(self): ...
    def wrap_function(self, fn: Any, signature: Any, name: Optional[Any] = ...): ...

def wrap_function(fn: Any, signature: Any, name: Optional[Any] = ...): ...
def function_from_graph_def(graph_def: Any, inputs: Any, outputs: Any): ...
