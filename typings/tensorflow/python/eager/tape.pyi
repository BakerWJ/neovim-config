from tensorflow.python import pywrap_tfe as pywrap_tfe
from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from typing import Any, Optional

distribution_strategy_context: Any

class Tape:
    def __init__(self, tape: Any) -> None: ...
    def watched_variables(self): ...

def push_new_tape(persistent: bool = ..., watch_accessed_variables: bool = ...): ...
def push_tape(tape: Any) -> None: ...
def watch(tape: Any, tensor: Any) -> None: ...
def watch_variable(tape: Any, variable: Any) -> None: ...
def variable_accessed(variable: Any) -> None: ...
def variables_accessed(variables: Any) -> None: ...
def pop_tape(tape: Any) -> None: ...
def stop_recording() -> None: ...
def should_record_backprop(tensors: Any): ...
def record_operation(op_type: Any, output_tensors: Any, input_tensors: Any, backward_function: Any, forward_function: Optional[Any] = ...) -> None: ...
def record_operation_backprop_only(op_type: Any, output_tensors: Any, input_tensors: Any, backward_function: Any) -> None: ...
def record_operation_forwardprop_only(op_type: Any, output_tensors: Any, input_tensors: Any, backward_function: Any, forwardprop_output_indices: Any) -> None: ...
def delete_trace(tensor_id: Any) -> None: ...
def could_possibly_record(): ...
