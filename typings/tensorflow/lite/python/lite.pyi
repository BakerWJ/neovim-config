import enum
from tensorflow.lite.experimental.examples.lstm.rnn import dynamic_rnn as dynamic_rnn
from tensorflow.lite.experimental.examples.lstm.rnn_cell import TFLiteLSTMCell as TFLiteLSTMCell, TfLiteRNNCell as TfLiteRNNCell
from tensorflow.lite.experimental.microfrontend.python.ops import audio_microfrontend_op as audio_microfrontend_op
from tensorflow.lite.experimental.tensorboard.ops_util import get_potentially_supported_ops as get_potentially_supported_ops
from tensorflow.lite.python.convert import ConverterError as ConverterError, OpsSet as OpsSet, build_toco_convert_protos as build_toco_convert_protos, toco_convert as toco_convert, toco_convert_protos as toco_convert_protos
from tensorflow.lite.python.interpreter import Interpreter as Interpreter, load_delegate as load_delegate
from tensorflow.lite.python.op_hint import OpHint as OpHint, convert_op_hints_to_stubs as convert_op_hints_to_stubs
from tensorflow.python.eager import context as context
from typing import Any, Optional

class Optimize(enum.Enum):
    DEFAULT: str = ...
    OPTIMIZE_FOR_SIZE: str = ...
    OPTIMIZE_FOR_LATENCY: str = ...

class RepresentativeDataset:
    input_gen: Any = ...
    def __init__(self, input_gen: Any) -> None: ...

class TargetSpec:
    supported_ops: Any = ...
    supported_types: Any = ...
    def __init__(self, supported_ops: Optional[Any] = ..., supported_types: Optional[Any] = ...) -> None: ...

class TFLiteConverterBase:
    allow_custom_ops: bool = ...
    target_spec: Any = ...
    optimizations: Any = ...
    representative_dataset: Any = ...
    experimental_new_converter: Any = ...
    def __init__(self) -> None: ...

class TFLiteConverterV2(TFLiteConverterBase):
    def __init__(self, funcs: Any, trackable_obj: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_concrete_functions(cls, funcs: Any): ...
    @classmethod
    def from_saved_model(cls, saved_model_dir: Any, signature_keys: Optional[Any] = ..., tags: Optional[Any] = ...): ...
    @classmethod
    def from_keras_model(cls, model: Any): ...
    def convert(self): ...

class TFLiteConverter(TFLiteConverterBase):
    inference_type: Any = ...
    inference_input_type: Any = ...
    inference_output_type: Any = ...
    output_format: Any = ...
    quantized_input_stats: Any = ...
    default_ranges_stats: Any = ...
    drop_control_dependency: bool = ...
    reorder_across_fake_quant: bool = ...
    change_concat_input_ranges: bool = ...
    dump_graphviz_dir: Any = ...
    dump_graphviz_video: bool = ...
    conversion_summary_dir: Any = ...
    def __init__(self, graph_def: Any, input_tensors: Any, output_tensors: Any, input_arrays_with_shape: Optional[Any] = ..., output_arrays: Optional[Any] = ..., experimental_debug_info_func: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_session(cls, sess: Any, input_tensors: Any, output_tensors: Any): ...
    @classmethod
    def from_frozen_graph(cls, graph_def_file: Any, input_arrays: Any, output_arrays: Any, input_shapes: Optional[Any] = ...): ...
    @classmethod
    def from_saved_model(cls, saved_model_dir: Any, input_arrays: Optional[Any] = ..., input_shapes: Optional[Any] = ..., output_arrays: Optional[Any] = ..., tag_set: Optional[Any] = ..., signature_key: Optional[Any] = ...): ...
    @classmethod
    def from_keras_model_file(cls, model_file: Any, input_arrays: Optional[Any] = ..., input_shapes: Optional[Any] = ..., output_arrays: Optional[Any] = ..., custom_objects: Optional[Any] = ...): ...
    optimizations: Any = ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __getattribute__(self, name: Any): ...
    def convert(self): ...
    def get_input_arrays(self): ...

class TocoConverter:
    @classmethod
    def from_session(cls, sess: Any, input_tensors: Any, output_tensors: Any): ...
    @classmethod
    def from_frozen_graph(cls, graph_def_file: Any, input_arrays: Any, output_arrays: Any, input_shapes: Optional[Any] = ...): ...
    @classmethod
    def from_saved_model(cls, saved_model_dir: Any, input_arrays: Optional[Any] = ..., input_shapes: Optional[Any] = ..., output_arrays: Optional[Any] = ..., tag_set: Optional[Any] = ..., signature_key: Optional[Any] = ...): ...
    @classmethod
    def from_keras_model_file(cls, model_file: Any, input_arrays: Optional[Any] = ..., input_shapes: Optional[Any] = ..., output_arrays: Optional[Any] = ...): ...
