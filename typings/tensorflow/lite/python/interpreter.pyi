from tensorflow.python.util.lazy_loader import LazyLoader as LazyLoader
from typing import Any, Optional

class Delegate:
    message: str = ...
    def __init__(self, library: Any, options: Optional[Any] = ...) -> None: ...
    def __del__(self) -> None: ...

def load_delegate(library: Any, options: Optional[Any] = ...): ...

class Interpreter:
    def __init__(self, model_path: Optional[Any] = ..., model_content: Optional[Any] = ..., experimental_delegates: Optional[Any] = ...) -> None: ...
    def __del__(self) -> None: ...
    def allocate_tensors(self): ...
    def get_tensor_details(self): ...
    def get_input_details(self): ...
    def set_tensor(self, tensor_index: Any, value: Any) -> None: ...
    def resize_tensor_input(self, input_index: Any, tensor_size: Any) -> None: ...
    def get_output_details(self): ...
    def get_tensor(self, tensor_index: Any): ...
    def tensor(self, tensor_index: Any): ...
    def invoke(self) -> None: ...
    def reset_all_variables(self): ...

class InterpreterWithCustomOps(Interpreter):
    def __init__(self, model_path: Optional[Any] = ..., model_content: Optional[Any] = ..., experimental_delegates: Optional[Any] = ..., custom_op_registerers: Optional[Any] = ...) -> None: ...
