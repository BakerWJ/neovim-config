import ast
from collections import namedtuple
from typing import Any, Optional

FIND_OPEN: Any
FIND_STRING_CHARS: Any
INFO: str
WARNING: str
ERROR: str

ImportRename = namedtuple('ImportRename', ['new_name', 'excluded_prefixes'])

def full_name_node(name: Any, ctx: Any = ...): ...
def get_arg_value(node: Any, arg_name: Any, arg_pos: Optional[Any] = ...): ...
def uses_star_args_in_call(node: Any): ...
def uses_star_kwargs_in_call(node: Any): ...
def uses_star_args_or_kwargs_in_call(node: Any): ...
def excluded_from_module_rename(module: Any, import_rename_spec: Any): ...

class APIChangeSpec:
    def preprocess(self, root_node: Any): ...
    def clear_preprocessing(self) -> None: ...

class NoUpdateSpec(APIChangeSpec):
    function_handle: Any = ...
    function_reorders: Any = ...
    function_keyword_renames: Any = ...
    symbol_renames: Any = ...
    function_warnings: Any = ...
    change_to_function: Any = ...
    module_deprecations: Any = ...
    function_transformers: Any = ...
    import_renames: Any = ...
    def __init__(self) -> None: ...

class _PastaEditVisitor(ast.NodeVisitor):
    def __init__(self, api_change_spec: Any) -> None: ...
    def visit(self, node: Any) -> None: ...
    @property
    def errors(self): ...
    @property
    def warnings(self): ...
    @property
    def warnings_and_errors(self): ...
    @property
    def info(self): ...
    @property
    def log(self): ...
    def add_log(self, severity: Any, lineno: Any, col: Any, msg: Any) -> None: ...
    def add_logs(self, logs: Any) -> None: ...
    def visit_Call(self, node: Any) -> None: ...
    def visit_Attribute(self, node: Any) -> None: ...
    def visit_Import(self, node: Any) -> None: ...
    def visit_ImportFrom(self, node: Any) -> None: ...

class AnalysisResult: ...
class APIAnalysisSpec: ...

class PastaAnalyzeVisitor(_PastaEditVisitor):
    def __init__(self, api_analysis_spec: Any) -> None: ...
    @property
    def results(self): ...
    def add_result(self, analysis_result: Any) -> None: ...
    def visit_Attribute(self, node: Any) -> None: ...
    def visit_Import(self, node: Any) -> None: ...
    def visit_ImportFrom(self, node: Any) -> None: ...

class ASTCodeUpgrader:
    def __init__(self, api_change_spec: Any) -> None: ...
    def process_file(self, in_filename: Any, out_filename: Any, no_change_to_outfile_on_error: bool = ...): ...
    def format_log(self, log: Any, in_filename: Any): ...
    def update_string_pasta(self, text: Any, in_filename: Any): ...
    def process_opened_file(self, in_filename: Any, in_file: Any, out_filename: Any, out_file: Any): ...
    def process_tree(self, root_directory: Any, output_root_directory: Any, copy_other_files: Any): ...
    def process_tree_inplace(self, root_directory: Any): ...
